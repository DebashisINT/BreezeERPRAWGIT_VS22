@*==========================================================Revision History ============================================================================================
 1.0   Priti   V2.0.36   17-01-2023     	0025581: Page Navigation to be implemented in the Product Selection Window of BOM entry Module
 2.0   Priti   V2.0.39   18-08-2023         0026720: Previous product has not been deleted in the Revised BOM.
========================================== End Revision History =======================================================================================================*@

@using System.Web.UI.WebControls
@using DevExpress.Web.Mvc
@using DevExpress.Web
@model Manufacturing.Models.ViewModel.BOMEntryModel.BOMEntryViewModel

@{
    ViewBag.Title = "Bill of Materials (BOM)";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*REV 1.0*@
<link href="https://cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css" rel="stylesheet" />
<script src="https://cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/fixedcolumns/3.3.0/js/dataTables.fixedColumns.min.js"></script>
<script src="~/Scripts/SearchPopupDatatable.js"></script>
@*REV 1.0 END*@
<link href="~/assests/css/SearchPopup.css" rel="stylesheet" />
<link href="~/assests/css/custom/PMSStyles.css" rel="stylesheet" />
<script>
    function MPSStartCallback(s, e) {
        // e.customArgs["MPS_ID"] = $("#hdnMPS_ID").val();
        e.customArgs["MPS_ID"] = '@ViewBag.MPS_ID';
        if ('@ViewBag.Unit' != "") {
            e.customArgs["Unit"] = '@ViewBag.Unit';
        }
        else {
            e.customArgs["Unit"] = $('#ddlBankBranch option:selected').val();
        }
    }
    var globalindexcheck = 0;
    function MPSSelectionChanged(s, e) {
        globalindexcheck = MPSGridLookup.GetGridView().GetFocusedRowIndex();
        var MPSId = (MPSGridLookup.GetGridView().GetRowKey(MPSGridLookup.GetGridView().GetFocusedRowIndex()));
        $('#hdnMPS_ID').val(MPSId);
        var key = MPSGridLookup.gridView.GetRowKey(globalindexcheck)
        if (key != null && globalindexcheck > -1) {
            var MPSdate = MPSGridLookup.gridView.GetRow(globalindexcheck).children[1].innerHTML;
            $('#MPSDate').val(MPSdate);
        }
    }
    function ProjectStartCallback(s, e) {
        e.customArgs["DetailsID"] = $("#hdnDetailsID").val();
        e.customArgs["Project_ID"] = '@ViewBag.ProjectID';
        if ('@ViewBag.Unit' != "") {
            e.customArgs["Unit"] = '@ViewBag.Unit';
        }
        else {
            e.customArgs["Unit"] = $('#ddlBankBranch option:selected').val();
        }
    }
    var projectCode = [];
    function ProjectSelectionChanged(s, e) {
        var projId = ProjectGridLookup.GetValue();
        $.ajax({
            type: "POST",
            url: "@Url.Action("getHierarchyID", "BOMEntry")",
            data: { ProjID: projId },
            success: function (response) {
                if (response != null) {
                    $('#ddlHierarchy').val(response.Message);
                }
            }
        });
    }
    function ProjectLookupValChange() {
        //ProjectGridLookup.SetValue("");
        //$('#ddlHierarchy').val("");
        //ProjectGridLookup.GetGridView().Refresh();
    }
    function ProjectLookupValChange() {
        //ProjectGridLookup.SetValue("");
        //$('#ddlHierarchy').val("");
        //ProjectGridLookup.GetGridView().Refresh();
    }
</script>
<link href="~/assests/css/ManufacturingCSS/bomIndex.css" rel="stylesheet" />
<style>
    .eqTble > tbody > tr > td {
        padding: 0 4px;
    }
</style>
@*<link href="~/Views/BOM/BOMEntry/bomIndex.css" rel="stylesheet" />*@
<script>

    var globalrowindex2 = 0;
    var globalrowindex = 0;
    var gridtxtbox = '1';
    var slno = 0;
    var firsttime = 0;
    var DetailsID = 0;
    var ProductionID = 0;
    var GBOMNo = "";
    var Message = "";
    var savemode = "";
    var hasmsg = 0;
    var rowtime = 0;
    var rowtime2 = 0;
    function gridclick(s, e) {
        globalrowindex = e.visibleIndex;
    }
    function btnPartNoList_Click(s, e) {
        PartNolist('', 'PartNo');
        setTimeout(function () { $("#txtPartNoCode").focus(); }, 500);
        $('#PartNolistModel').modal('show');
    }
    function btnProductList_Click(s, e) {
        Productlist('', null);
        setTimeout(function () { $("#txtProductName").focus(); }, 500);
        $('#ProductlistModel').modal('show');
    }
    $(document).ready(function () {

        setTimeout(function () { AddNewRowWithSl(); AddNewRowGridResources(); }, 200);

        // 18.06.2019
        $('#ProductlistModel, #GridBOMlistModel, #GridWarehouselistModel, #GridProductlistModel').modal({
            keyboard: true,
            backdrop: 'static',
            show: false
        });

        if ('@ViewBag.ProjectShow' == "Yes") {
            $("#divProj").removeClass("hidden");
        }
        else {
            $("#divProj").addClass("hidden");
        }

        if ('@ViewBag.Hierarchy' == "1") {
            $('#divHierarchy').removeClass('hidden');
        }
        else {
            $('#divHierarchy').addClass('hidden');
        }
        //Rev Pratik
        @*if ('@ViewBag.MultiUOMSelectionForManufacturing' == 'Yes') {
            PQty.SetEnabled(false);
        }
        else {
            ProductQty.SetEnabled(true);
        }*@
        //End Rev Pratik
    });
    function AddNewRowGridResources() {
        //gridBOMResourcesList.batchEditApi.StartEdit(index, 1);
        gridBOMResourcesList.batchEditApi.EndEdit();
        gridBOMResourcesList.AddNewRow();
        index = globalrowindex2;
        resufflegrid2Serial();

        setTimeout(function () {
            gridBOMResourcesList.batchEditApi.EndEdit();
            gridBOMResourcesList.batchEditApi.StartEdit(index, 1);
        }, 200);
    }
    function resufflegrid2Serial() {
        var sl = 1;
        var visiablerow = gridBOMResourcesList.GetVisibleRowsOnPage();
        if (visiablerow > 0 && rowtime2 == 0) {
            sl = visiablerow;
            rowtime2++;
        }
        for (var i = -1; i > -500; i--) {
            if (gridBOMResourcesList.GetRow(i)) {
                gridBOMResourcesList.batchEditApi.StartEdit(i, 1);
                gridBOMResourcesList.GetEditor('SlNO').SetText(sl);
                gridBOMResourcesList.batchEditApi.StartEdit(i, 1);
                sl = sl + 1;
            }
        }
    }
    function addNewRowToEditgrid() {
        gridBOMProductEntryList.batchEditApi.EndEdit();
        gridBOMProductEntryList.AddNewRow();

        var sl = 1;
        var visiablerow = gridBOMProductEntryList.GetVisibleRowsOnPage();
        if (visiablerow > 0) {
            sl = visiablerow;
        }
        gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 1);
        gridBOMProductEntryList.GetEditor('SlNO').SetText(sl);


        setTimeout(function () {
            gridBOMProductEntryList.batchEditApi.EndEdit();
            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 2);
        }, 200);


    }
    function addNewRowToEditResourcegrid() {
        gridBOMResourcesList.batchEditApi.EndEdit();
        gridBOMResourcesList.AddNewRow();

        var sl = 1;
        var visiablerow = gridBOMResourcesList.GetVisibleRowsOnPage();
        if (visiablerow > 0) {
            sl = visiablerow;
        }
        gridBOMResourcesList.batchEditApi.StartEdit(globalrowindex2, 1);
        gridBOMResourcesList.GetEditor('SlNO').SetText(sl);

        setTimeout(function () {
            gridBOMResourcesList.batchEditApi.EndEdit();
            gridBOMResourcesList.batchEditApi.StartEdit(globalrowindex2, 2);
        }, 200);


    }
    function DeleteRowProductGrid(edit) {
        var sl = 1;
        gridBOMProductEntryList.batchEditApi.EndEdit();
        for (var i = 0; i < 500; i++) {
            //if (gridBOMProductEntryList.GetRow(i) && i != edit) {
                if (gridBOMProductEntryList.GetRow(i) ) {
                var tr = gridBOMProductEntryList.GetRow(i);
                if (tr.style.display != "none") {
                    gridBOMProductEntryList.batchEditApi.StartEdit(i, 1);
                    gridBOMProductEntryList.GetEditor('SlNO').SetText(sl);
                    gridBOMProductEntryList.batchEditApi.StartEdit(i, 1);
                    sl = sl + 1;
                }
            }
        }
        for (var i = -1; i > -500; i--) {
            /*if (gridBOMProductEntryList.GetRow(i) && i != edit) {*/
            if (gridBOMProductEntryList.GetRow(i) ) {
                var tr = gridBOMProductEntryList.GetRow(i);
                if (tr.style.display != "none") {
                    gridBOMProductEntryList.batchEditApi.StartEdit(i, 1);
                    gridBOMProductEntryList.GetEditor('SlNO').SetText(sl);
                    gridBOMProductEntryList.batchEditApi.StartEdit(i, 1);
                    sl = sl + 1;
                }
            }
        }
    }
    function DeleteRowResourceGrid(edit) {
        var sl = 1;
        gridBOMResourcesList.batchEditApi.EndEdit();
        for (var i = 0; i < 500; i++) {
            if (gridBOMResourcesList.GetRow(i) && i != edit) {
                var tr = gridBOMResourcesList.GetRow(i);
                if (tr.style.display != "none") {
                    gridBOMResourcesList.batchEditApi.StartEdit(i, 1);
                    gridBOMResourcesList.GetEditor('SlNO').SetText(sl);                    
                    gridBOMResourcesList.batchEditApi.StartEdit(i, 1);
                    sl = sl + 1;
                }
            }
        }

        for (var i = -1; i > -500; i--) {
            if (gridBOMResourcesList.GetRow(i) && i != edit) {

                var tr = gridBOMResourcesList.GetRow(i);
                if (tr.style.display != "none") {

                    gridBOMResourcesList.batchEditApi.StartEdit(i, 1);
                    gridBOMResourcesList.GetEditor('SlNO').SetText(sl);
                    //if (grid.GetEditor('low').GetText() == "") {
                    //    grid.GetEditor('low').SetText(0);
                    //    grid.GetEditor('high').SetText(0);
                    //    grid.GetEditor('value').SetText(0);
                    //}
                    gridBOMResourcesList.batchEditApi.StartEdit(i, 1);
                    sl = sl + 1;
                }
            }
        }
    }

    /*---------------Arindam*----------*/
    function AddNewRowWithSl() {

        gridBOMProductEntryList.batchEditApi.EndEdit();
        gridBOMProductEntryList.AddNewRow();
        index = globalrowindex;
        resuffleSerial();

        setTimeout(function () {
            gridBOMProductEntryList.batchEditApi.EndEdit();
            gridBOMProductEntryList.batchEditApi.StartEdit(index, 1);
        }, 200);
    }


    function resuffleSerial() {

        var sl = 1;
        var visiablerow = gridBOMProductEntryList.GetVisibleRowsOnPage();
        if (visiablerow > 0 && rowtime == 0) {
            sl = visiablerow;
            rowtime++;
        }

        for (var i = -1; i > -500; i--) {
            if (gridBOMProductEntryList.GetRow(i)) {
                gridBOMProductEntryList.batchEditApi.StartEdit(i, 1);
                gridBOMProductEntryList.GetEditor('SlNO').SetText(sl);
                //if (grid.GetEditor('low').GetText() == "") {
                //    grid.GetEditor('low').SetText(0);
                //    grid.GetEditor('high').SetText(0);
                //    grid.GetEditor('value').SetText(0);
                //}
                gridBOMProductEntryList.batchEditApi.StartEdit(i, 1);
                sl = sl + 1;
            }
        }
    }


    function grid_CustomButtonGridResourcesClick() {
        //if (e.buttonID == "Delete") {
        var noofvisiblerows = gridBOMResourcesList.GetVisibleRowsOnPage();

        if (noofvisiblerows != 1) {
            gridBOMResourcesList.DeleteRow(globalrowindex2);

            if ($('#hdnDetailsID').val() == 0) {
                resufflegrid2Serial();
            }
            else {
                DeleteRowResourceGrid(globalrowindex2);
            }

            BOMGridResourceSetTotalAmount();
        }
        //}
        //e.processOnServer = false;

    }

    function grid_CustomButtonClick(s) {
        var noofvisiblerows = gridBOMProductEntryList.GetVisibleRowsOnPage();
        if (noofvisiblerows != 1) {
            gridBOMProductEntryList.batchEditApi.StartEdit(s);
            gridBOMProductEntryList.DeleteRow(s);
            if ($('#hdnDetailsID').val() == 0) {
                resuffleSerial();
            }
            else {
                DeleteRowProductGrid(s);
            }
            BOMGridSetTotalAmount();
        }
    }


    //function BatchStartEditing(s, e) {
    //    globalrowindex = e.visibleIndex;
    //}

    function ResourceBatchStartEditing(s, e) {
        globalrowindex2 = e.visibleIndex;
    }

    var typemodal = "";
    function OpenNonInventoryProductList(s, e) {
        slno = gridBOMResourcesList.GetDataRow(globalrowindex2).children[0].innerHTML.trim();
        GridNonInventoryProductlist("", "nonInventory", slno);
        typemodal = "nonInventory";
        $('#GridProductlistModel').modal('show');
        $('#txtGridProductName').focus();

        setTimeout(function () {
            $('#txtGridProductName').focus();
        }, 600);
    }

    function GridNonInventoryProductlist(SearchKey, type, txtid) {
        gridnonproductlist = 1;
        var OtherDetails = {}
        OtherDetails.SearchKey = SearchKey;
        OtherDetails.Type = type;
        gridtxtbox = txtid;
        var HeaderCaption = [];
        // HeaderCaption.push("Product ID");
        HeaderCaption.push("Product Code");
        HeaderCaption.push("Product Name");
        HeaderCaption.push("Inventory");
        HeaderCaption.push("HSN/SAC");
        HeaderCaption.push("Brand");
        HeaderCaption.push("Class");
        callonServer("../Models/pManufacturing_WebServiceList.asmx/GetProductDetailsList", OtherDetails, "GridProductTable", HeaderCaption, "NonIProductIndex", "SetGridNonInventoryProduct");
        setTimeout(function () {
            $('#txtGridProductName').focus();
        }, 600);
    }

    function OpenProductList(s, e) {
        if (gridBOMProductEntryList.GetDataRow(globalrowindex) != null) {
            slno = gridBOMProductEntryList.GetDataRow(globalrowindex).children[0].innerHTML.trim();
        }
        GridProductlist("", "A", slno);
        typemodal = "A";
        $('#GridProductlistModel').modal('show');
        $('#txtGridProductName').focus();
    }

    function OpenWarehouseList(s, e) {
        slno = gridBOMProductEntryList.GetDataRow(globalrowindex).children[0].innerHTML.trim();
        gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 2);
        var ProductName = gridBOMProductEntryList.GetEditor('ProductName').GetText();
        if (ProductName == "") {
            jAlert("Please select product before select warehouse!");
            return false;
        }
        else {
            GridWarehouselist();
            warehousefocus = 1;

        }
    }

    //rev Pratik
    //function

    function MultiUOMList(s, e) {
        $('#Popup_MultiUOM').show();
        slno = gridBOMProductEntryList.GetDataRow(globalrowindex).children[0].innerHTML.trim();
        gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 2);
        var ProductName = gridBOMProductEntryList.GetEditor('ProductName').GetText();
        var Productdetails = $("#hdnProDetString").val()

        var ProductID = gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 1)

        if (ProductName == "") {
            jAlert("Please select product before select Multi Uom!");
            return false;
        }
        else {
            GridMultiUom(s, e);


        }
    }
    function GridMultiUom(s, e) {
        debugger;
        var BankBranchID = $('#ddlBankBranch option:selected').val();
        gridBOMProductEntryList.batchEditApi.StartEdit(e.visibleIndex, 6);
        var otherdet = {};
        var Productdetails = $("#hdnProDetString").val()
        //var Productdetails = (gridBOMProductEntryList.GetEditor('ProductId').GetText() != null) ? gridBOMProductEntryList.GetEditor('ProductId').GetText() : "0";
        //var ProductID = Productdetails.split("|")[0];
        gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 1);
        var ProductID = gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex,1); //gridBOMProductEntryList.GetEditor('ProductID').GetValue();
        var Product_ID = gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 18);
        var UOMName = gridBOMProductEntryList.batchEditApi.GetCellValue("UOM");
        var quantity = gridBOMProductEntryList.batchEditApi.GetCellValue("Quantity");
        var DetailsId = gridBOMProductEntryList.batchEditApi.GetCellValue("DetailsId");


        var StockUOM = Productdetails.split("|")[5];



        otherdet.Type = 'MultiUOMDisPlay';
        otherdet.MultiUOMSR_id = $("#hdnMultiUOMSR").val();

        otherdet.srlNo = ProductID;
        otherdet.qnty = "";
        otherdet.UomName = "";
        otherdet.AltUomName = "";
        otherdet.AltQnty = "";
        otherdet.UomId = "";
        otherdet.AltUomId = "";
        otherdet.ProductID = "";
        otherdet.BaseRate = "";
        otherdet.AltRate = "";
        otherdet.UpdateRow = "";

        $.ajax({
            type: "POST",
            url: "/BOMEntry/MultiUomGridTemp",
            data: JSON.stringify(otherdet),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            success: function (data) {
                $('#datatableMultiUom tbody').empty();
                $.each(data, function (i, data) {
                    //pk = FnGetEncryptdata(data.membermasterreq_id);
                    //ctr++;
                    //var table = $('#datatableMultiUom').DataTable();
                    //table.destroy();

                    var body = "<tr>";
                    body += "<td>" + data.Quantity + "</td>";
                    body += "<td>" + data.UOM + "</td>";
                    body += "<td>" + data.BaseRate + "</td>";
                    body += "<td>" + data.AltUOM + "</td>";
                    body += "<td>" + data.AltQuantity + "</td>";
                    body += "<td>" + data.AltRate + "</td>";
                    body += "<td>" + data.UpdateRow + "</td>";
                    //alert(data.MultiUOMSR)
                    //body += '<td><a class="iq-bg-primary" data-toggle="tooltip" data-placement="top" title="" data-original-title="Edit" href="/NDMaster/NDMember/MemberMasterReqEdit?mid=' + data.SrlNo + '" ><i class="ri-pencil-line"></i></a></td>';
                    body += '<td><a href="javascript:void(0);" onclick="Edit_MultiUom(' + data.MultiUOMSR + ')" title="Edit"><img src="/assests/images/Edit.png" /></a>&nbsp&nbsp&nbsp<a href="javascript:void(0);" onclick="Delete_MultiUom(' + data.MultiUOMSR + ')" title="Delete"><img src="/assests/images/Delete.png" /></a></td>';
                    body += "</tr>";
                    $("#datatableMultiUom tbody").append(body);
                });
            }
        });

        if (StockUOM == "") {
            StockUOM = "0";
        }

        if ((ProductID != "") && (UOMName != "")) {
            //end rev bapi


            var Qnty = gridBOMProductEntryList.batchEditApi.GetCellValue("Quantity");
            var SrlNo = (gridBOMProductEntryList.batchEditApi.GetCellValue('SrlNo') != null) ? gridBOMProductEntryList.batchEditApi.GetCellValue('SrlNo') : "";
            //var UomId = Productdetails.split("|")[10];
            //ccmbUOM.SetValue(UomId);
            //alert(UomId)

            //$("#ddl_UOM").prop("disabled", false)
            //$("#ddl_UOM").val(UomId)
            //$("#ddl_UOM").prop("disabled", true)
            // Mantis Issue 24428
            //$("#UOMQuantity").val(Qnty);
            $("#UOMQuantity").val("0.0000");
            //ccmbBaseRate.SetValue(0);
            $("#cmbBaseRate").val(0);
            //cAltUOMQuantity.SetValue(0);
            $("#AltUOMQuantity").val(0);
            //ccmbAltRate.SetValue(0);
            $("#cmbAltRate").val(0.000);
            //ccmbSecondUOM.SetValue("");
            $("#ddl_ALTUOM").val('');
            $("#chkUpdateRow").prop('checked', false);
            $("#chkUpdateRow").removeAttr("checked");
            // End of Mantis Issue 24428
            $('#Popup_MultiUOM').modal('show');
            //cgrid_MultiUOM.cpDuplicateAltUOM = "";
            AutoPopulateMultiUOM();
            BindUomDetails();


        }

    }
    function BindUomDetails() {
        var UOMId = 0;
        var AltUOMId = 0;
        var Product_ID = gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 18);

            $.ajax({
                type: "POST",
                url: "/BOMEntry/AutoPopulateAltQuantity",
                data: JSON.stringify({ ProductID: Product_ID }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {

                    $.each(data, function (i, data) {
                        //alert(data.AltUOMId)
                        if (data.AltUOMId != 0) {
                            //packingQuantity = data.packing_quantity;
                            //sProduct_quantity = data.sProduct_quantity;
                            AltUOMId = data.AltUOMId;
                            UOMId = data.UOMId;
                            $("#ddl_UOM").val(UOMId)
                            $("#ddl_UOM").prop("disabled", true)
                        }
                        else {
                            //packingQuantity = 0;
                            //sProduct_quantity = 0;
                            AltUOMId = 0;
                            UOMId = 0;
                            $("#ddl_UOM").val(UOMId)
                            $("#ddl_UOM").prop("disabled", true)
                        }
                    });
                }
            });

    }
    $(document).ready(function () {
        if ('@ViewBag.MultiUOMSelectionForManufacturing' == 'Yes') {
            gridBOMProductEntryList.GetEditor('ProductQty').SetEnabled(false);
            //gridBOMProductEntryList.GetEditor('AltQuantity').SetVisible(false);
            //gridBOMProductEntryList.GetEditor('AltQuantity').SetVisible(false);
            //$("#gridBOMProductEntryList").("columnOption", "AltQuantity", "visible", false);
            //gridBOMProductEntryList.GetEditor('AltQuantity').Visible = false;
            }
            else {
            gridBOMProductEntryList.GetEditor('ProductQty').SetEnabled(true);
           // gridBOMProductEntryList.GetEditor('ProductQty')
           // gridBOMProductEntryList.GetEditor('AltQuantity').hide();
           // gridBOMProductEntryList.GetEditor('ProductQty')


            }
    });
    //End rev Pratik

    function GridWarehouselist() {
        var BankBranchID = $('#ddlBankBranch option:selected').val();
        if (BankBranchID > 0) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("getWarehouseRecord", "BOMEntry")",
                data: { branchid: BankBranchID },
                success: function (response) {
                    $('#ddlWarehouselist').html('');
                    var html = "";
                    for (var i = 0; i < response.length; i++) {
                        html = html + "<option value='" + response[i].WarehouseID + "'>" + response[i].WarehouseName + "</option>";
                    }
                    $('#ddlWarehouselist').html(html);
                    gridBOMProductEntryList.batchEditApi.EndEdit();
                    //$('#setWarehousegrid').focus();
                    $('#GridWarehouselistModel').modal('show');


                }
            });
        }
        else {
            jAlert('Please select branch!');
            $('#GridWarehouselistModel').modal('hide');
            return false;
        }
    }

    function SetWarehouseInGrid() {

        var Warehouseid = $('#ddlWarehouselist option:selected').val();
        var Warehousetxt = $('#ddlWarehouselist option:selected').text();
        if (Warehousetxt != "") {
            //gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 8);
            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 11);
            gridBOMProductEntryList.GetEditor('Warehouse').SetText(Warehousetxt);

            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 19);
            gridBOMProductEntryList.GetEditor('ProductsWarehouseID').SetText(Warehouseid);
            $('#GridWarehouselistModel').modal('hide');
            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 9);
        }
        else {
            jAlert("Please select warehouse!");
        }
    }

    function SetWarehouseAfterProduct() {
        gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 7);
    }


    //rev Pratik
    //var globalrowindex3 = 0;
    //End of rev Pratik


    function gridResourceclick(s, e) {
        globalrowindex2 = e.visibleIndex;
    }

    var bomlinkindex = 0;
    function OpenBOMList(s, e) {
        if (gridBOMProductEntryList.GetDataRow(globalrowindex) != null) {
            slno = gridBOMProductEntryList.GetDataRow(globalrowindex).children[0].innerHTML.trim();
        }
        gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 2);
        var ProductName = gridBOMProductEntryList.GetEditor('ProductName').GetText();
        if (ProductName == "") {
            jAlert("Please select product before select BOM!");
            return false;
        }
        else {
            GetBOMList('', slno);
            bomlinkindex = 1;
            setTimeout(function () { $("#txtBOMName").focus(); }, 500);
            $('#GridBOMlistModel').modal('show');

        }
    }

    function GetBOMList(SearchKey, slno) {
        var productid = gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 'ProductId');
        var OtherDetails = {}
        var BOMDate = GetServerDateFormat(BOMDate_dt.GetValue());
        OtherDetails.SearchKey = SearchKey;
        OtherDetails.ProductID = productid;
        OtherDetails.BOMDate = BOMDate;
        OtherDetails.BranchID = $('#ddlBankBranch option:selected').val();
        var HeaderCaption = [];
        HeaderCaption.push("BOM No.");
        HeaderCaption.push("BOM Date");
        HeaderCaption.push("Revision No.");
        HeaderCaption.push("Revision Date");

        callonServer("../Models/pManufacturing_WebServiceList.asmx/GetBOMList", OtherDetails, "GridBOMTable", HeaderCaption, "BOMIndex", "SetGridBOMProduct");

    }

    function GridPartNolist(SearchKey, type, txtid) {
        gridproductlist = 1;
        var OtherDetails = {}
        OtherDetails.SearchKey = SearchKey;
        OtherDetails.Type = type;
        gridtxtbox = txtid;
        var HeaderCaption = [];
        // HeaderCaption.push("Product ID");
        HeaderCaption.push("Product Code");
        HeaderCaption.push("Product Name");
        HeaderCaption.push("Inventory");
        HeaderCaption.push("HSN/SAC");

        HeaderCaption.push("Brand");
        HeaderCaption.push("Class");

        callonServer("../Models/pManufacturing_WebServiceList.asmx/GetProductDetailsList", OtherDetails, "GridProductTable", HeaderCaption, "GridProductIndex", "SetPartNo");

        setTimeout(function () {
            $('#txtGridProductName').focus();
        }, 600);

    }

    function GridProductlist(SearchKey, type, txtid) {
        gridproductlist = 1;
        var OtherDetails = {}
        OtherDetails.SearchKey = SearchKey;
        OtherDetails.Type = type;
        gridtxtbox = txtid;
        var HeaderCaption = [];
        // HeaderCaption.push("Product ID");
        HeaderCaption.push("Product Code");
        HeaderCaption.push("Product Name");
        HeaderCaption.push("Inventory");
        HeaderCaption.push("HSN/SAC");

        HeaderCaption.push("Brand");
        HeaderCaption.push("Class");

        callonServer("../Models/pManufacturing_WebServiceList.asmx/GetProductDetailsList", OtherDetails, "GridProductTable", HeaderCaption, "GridProductIndex", "SetGridProduct");

        setTimeout(function () {
            $('#txtGridProductName').focus();
        }, 600);

    }

    function Productlist(SearchKey, type) {
        finishedproductlist = 1;
        var OtherDetails = {}
        OtherDetails.SearchKey = SearchKey;
        OtherDetails.Type = type;

        var HeaderCaption = [];
        // HeaderCaption.push("Product ID");
        HeaderCaption.push("Product Code");
        HeaderCaption.push("Product Name");
        HeaderCaption.push("Inventory");
        HeaderCaption.push("HSN/SAC");
        HeaderCaption.push("Brand");
        HeaderCaption.push("Class");
        //REV 1.0
        //callonServerScroll("../Models/pManufacturing_WebServiceList.asmx/GetProductDetailsList", OtherDetails, "ProductTable", HeaderCaption, "ProductIndex", "SetProduct");
        callonServer("../Models/pManufacturing_WebServiceList.asmx/GetProductDetailsList", OtherDetails, "ProductTable", HeaderCaption, "ProductIndex", "SetProduct");
       /* REV 1.0 END*/
    }
    function PartNolist(SearchKey, type) {
        finishedproductlist = 1;
        var OtherDetails = {}
        OtherDetails.SearchKey = SearchKey;
        OtherDetails.Action = type;

        var HeaderCaption = [];
        // HeaderCaption.push("Product ID");
        HeaderCaption.push("Product Code");
        //HeaderCaption.push("Product Name");
        //HeaderCaption.push("Inventory");
        //HeaderCaption.push("HSN/SAC");
        //HeaderCaption.push("Brand");
        //HeaderCaption.push("Class");

        callonServer("../Models/pManufacturing_WebServiceList.asmx/GetPartNoDetailsList", OtherDetails, "PartNoTable", HeaderCaption, "PartNoIndex", "SetPartNo");
    }


    function SetGridNonInventoryProduct(Id, Name, e) {
        gridnonproductlist = 0;
        var ProductID = Id;
        var ProductName = Name;
        //alert('');
        if (ProductID != "") {

            var data = ProductID.split('|');
            ProductID = data[0];

            var amind = gridBOMResourcesList.batchEditApi.GetColumnIndex('Amount');
            gridBOMResourcesList.batchEditApi.StartEdit(globalrowindex2, amind);
            gridBOMResourcesList.GetEditor('Amount').SetText("0.00");

            var qtyindex = gridBOMResourcesList.batchEditApi.GetColumnIndex('ProductQty');
            gridBOMResourcesList.batchEditApi.StartEdit(globalrowindex2, qtyindex);
            gridBOMResourcesList.GetEditor('ProductQty').SetText("0.00");
            //rev Pratik
            //gridBOMResourcesList.batchEditApi.StartEdit(globalrowindex2, 10);
            gridBOMResourcesList.batchEditApi.StartEdit(globalrowindex2, 12);
            //End of rev Pratik
            gridBOMResourcesList.GetEditor('ProductId').SetText(ProductID);

            gridBOMResourcesList.batchEditApi.StartEdit(globalrowindex2, 2);
            gridBOMResourcesList.GetEditor('ProductName').SetText(ProductName);
            //gridBOMResourcesList.GetDataRow(globalrowindex).children[1].innerHTML = ProductName;

            //$('#' + gridtxtbox + '_txtbox').val(ProductName);
            $('#GridProductlistModel').modal('hide');
            gridBOMResourcesList.batchEditApi.StartEdit(globalrowindex2, 3);
            gridBOMResourcesList.GetEditor('ProductDescription').SetText(data[6]);
            gridBOMResourcesList.batchEditApi.StartEdit(globalrowindex2, 5);

            gridBOMResourcesList.GetEditor('ProductUOM').SetText(data[1]);
            //$('#' + gridtxtbox + '_txtDescription').val(data[2]);
            //$('#' + gridtxtbox + '_txtStockUOM').val(data[1]);
            gridBOMResourcesList.batchEditApi.StartEdit(globalrowindex2, 7);
            gridBOMResourcesList.GetEditor('Price').SetText(data[3]);
            gridBOMResourcesList.batchEditApi.StartEdit(globalrowindex2, 12);
            gridBOMResourcesList.GetEditor('ProductsWarehouseID').SetText(data[4]);
            //$('#' + gridtxtbox + '_txtPrice').val(data[3]);
            //gridBOMResourcesList.batchEditApi.StartEdit(globalrowindex2, 6);
            //gridBOMResourcesList.GetEditor('Warehouse').SetText(data[5]);
            gridBOMResourcesList.batchEditApi.StartEdit(globalrowindex2, 4);
            //btnFinishedItem.SetText(ProductName);
            //document.getElementById('hdnProductID').value = Id;
        }
    }

    function SetProduct(Id, Name, e) {
        finishedproductlist = 0;
        var ProductID = Id;
        var ProductName = Name;

        if (ProductID != "") {

            var data = ProductID.split('|');
            ProductID = data[0];
            var Description = data[3];
            var DesignNo = data[4];
            var RevisionNo = data[5];
            $('#FinishedUom').val(data[1]);
            $('#ProductlistModel').modal('hide');
            btnFinishedItem.SetText(ProductName);
            $('#hdnFinishedItem').val(ProductID);
            document.getElementById('hdnProductID').value = Id;
            $('#FinishedQty').select();
            $('#FinishedQty').focus();
            $('#Description').val(Description);
            $('#PartNoName').val(ProductName);
            $('#DesignNo').val(DesignNo);
            $('#ItemRevNo').val(RevisionNo);
            $('#hdnPartNo').val(ProductID);
        }
    }

    function SetPartNo(Id, Name, e) {
        finishedproductlist = 0;
        var ProductID = Id;
        var ProductCode = Name;

        if (ProductID != "") {
            var data = ProductID.split('|');
            ProductID = data[0];
            var DesignNo = data[2];
            var RevisionNo = data[3];
            $('#PartNolistModel').modal('hide');
            btnPartNo.SetText(ProductCode);
            $('#hdnPartNo').val(ProductID);
            $('#DesignNo').val(DesignNo);
            $('#ItemRevNo').val(RevisionNo);

            //document.getElementById('hdnProductID').value = Id;

        }
    }

    function SetGridProduct(Id, Name, e) {
        //alert(Id)
        gridproductlist = 0;
        var ProductID = Id;
        var ProductName = Name;
        //rev Pratik
        $("#hdnProDetString").val(Id);
        //End of rev Pratik
        if (ProductID != "") {

            var data = ProductID.split('|');
            ProductID = data[0];

            var amind = gridBOMProductEntryList.batchEditApi.GetColumnIndex('Amount');
            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, amind);
            gridBOMProductEntryList.GetEditor('Amount').SetText("0.00");

            var qtyindex = gridBOMProductEntryList.batchEditApi.GetColumnIndex('ProductQty');
            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, qtyindex);
            gridBOMProductEntryList.GetEditor('ProductQty').SetText("0.00");
            if ('@ViewBag.MultiUOMSelectionForManufacturing' == 'Yes') {
                gridBOMProductEntryList.GetEditor('ProductQty').SetEnabled(false);
            }
            else {
                gridBOMProductEntryList.GetEditor('ProductQty').SetEnabled(true);
            }
            //rev Pratik
            //gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 15);
            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 18);
            //End of rev Pratik
            gridBOMProductEntryList.GetEditor('ProductId').SetText(ProductID);
            ////rev Pratik
            //gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 16);
            //gridBOMProductEntryList.GetEditor('AltQuantity').SetText(AltQuantity);
            //gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 17);
            //gridBOMProductEntryList.GetEditor('AltUom').SetText(AltUom);
            ////End of rev Pratik
            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 2);
            gridBOMProductEntryList.GetEditor('ProductName').SetText(ProductName);
            //gridBOMProductEntryList.GetDataRow(globalrowindex).children[1].innerHTML = ProductName;

            //$('#' + gridtxtbox + '_txtbox').val(ProductName);
            $('#GridProductlistModel').modal('hide');
            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 3);
            gridBOMProductEntryList.GetEditor('ProductDescription').SetText(data[6]);
            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 7);

            gridBOMProductEntryList.GetEditor('ProductUOM').SetText(data[1]);
            //$('#' + gridtxtbox + '_txtDescription').val(data[2]);
            //$('#' + gridtxtbox + '_txtStockUOM').val(data[1]);
            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 12);
            gridBOMProductEntryList.GetEditor('Price').SetText(data[3]);
            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 19);
            gridBOMProductEntryList.GetEditor('ProductsWarehouseID').SetText(data[4]);
            //$('#' + gridtxtbox + '_txtPrice').val(data[3]);
            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 11);
            gridBOMProductEntryList.GetEditor('Warehouse').SetText(data[5]);
            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 4);
            //btnFinishedItem.SetText(ProductName);
            //document.getElementById('hdnProductID').value = Id;
            gridBOMProductEntryList.GetEditor('DesignNo').SetText(data[7]);
            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 5);
            gridBOMProductEntryList.GetEditor('ItemRevisionNo').SetText(data[8]);

            gridBOMProductEntryList.GetEditor('IsInventory').SetText(data[9]);



        }
    }
    //rev Pratik
    $(document).ready(function () {
        UOMDDL();
        ALTUOMDDL();
    });
    function UOMDDL() {
        //alert("ddl branch")
        $.ajax({
            type: 'GET',
            url: "/BOMEntry/GetUOMDDL",
            dataType: "json",
            async: false,
            success: function (data) {
                $('#ddl_UOM').empty();
                //$('#ddl_UOM').append('<option value="0">--Select--</option>');
                //$q('#ddl_srh_hrm').append('<option value="0">All</option>');
                $.each(data, function (I, Value) {

                    $('#ddl_UOM').append('<option value="' + Value.UOM_ID + '">' + Value.UOM_Name + '</option>');
                });
            },
            error: function () {
                //alert('DDL Fail!');
            }
        });
    }
    function ALTUOMDDL() {
        //alert("ddl branch")
        $.ajax({
            type: 'GET',
            url: "/BOMEntry/GetUOMDDL",
            dataType: "json",
            async: false,
            success: function (data) {
                $('#ddl_ALTUOM').empty();
                //$('#ddl_ALTUOM').append('<option value="0">--Select--</option>');
                //$q('#ddl_srh_hrm').append('<option value="0">All</option>');
                $.each(data, function (I, Value) {

                    $('#ddl_ALTUOM').append('<option value="' + Value.UOM_ID + '">' + Value.UOM_Name + '</option>');
                });
            },
            error: function () {
                //alert('DDL Fail!');
            }
        });
    }
    function CalcBaseRate() {
        //debugger;
        var altQty = $("#AltUOMQuantity").val();
        var altRate = $("#cmbAltRate").val();
        var baseQty = $("#UOMQuantity").val();


        if (baseQty > 0) {
            var BaseRate = parseFloat((altQty * altRate) / baseQty).toFixed(3);
            //ccmbBaseRate.SetValue(BaseRate);
            $("#cmbBaseRate").val(BaseRate);
        }
    }
    function setTwoNumberDecimal(event) {
        //debugger;
        this.value = parseFloat(this.value).toFixed(4);
    }
    function AutoPopulateMultiUOM() {

        var Productdetails = $("#hdnProDetString").val()

        var ProductID = Productdetails.split("|")[0];
        //var ProductID = gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 1);
        hdProductID.value = ProductID;

        var QuantityValue = (gridBOMProductEntryList.batchEditApi.GetCellValue("Quantity") != null) ? gridBOMProductEntryList.batchEditApi.GetCellValue("Quantity") : "0";
        var packingQuantity = 0;
        var sProduct_quantity = 0;
        var AltUOMId = 0;
        $.ajax({
            type: "POST",
            url: "/BOMEntry/AutoPopulateAltQuantity",
            data: JSON.stringify({ ProductID: ProductID }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                //alert(msg.d[0].packing_quantity)
                $.each(data, function (i, data) {
                    //alert(data.AltUOMId)
                    if (data.AltUOMId != 0) {
                        packingQuantity = data.packing_quantity;
                        sProduct_quantity = data.sProduct_quantity;
                        AltUOMId = data.AltUOMId;
                    }
                    else {
                        packingQuantity = 0;
                        sProduct_quantity = 0;
                        AltUOMId = 0;
                    }
                });

                var uomfactor = 0
                if (sProduct_quantity != 0 && packingQuantity != 0) {
                    uomfactor = parseFloat(packingQuantity / sProduct_quantity).toFixed(4);
                    $('#hddnuomFactor').val(parseFloat(packingQuantity / sProduct_quantity));
                }
                else {
                    $('#hddnuomFactor').val(0);
                }

                var uomfac_Qty_to_stock = $('#hddnuomFactor').val();
                var Qty = QuantityValue;
                var calcQuantity = parseFloat(Qty * uomfac_Qty_to_stock).toFixed(4);
                if ($("#hdnPageStatus").val() == "update") {

                    $("#ddl_ALTUOM").val('');
                    $("#AltUOMQuantity").val(calcQuantity);


                }
                else {
                    if (AltUOMId == 0) {

                        $("#ddl_ALTUOM").val('');
                    }
                    else {
                        //ccmbSecondUOM.SetValue(AltUOMId);
                        $("#ddl_ALTUOM").val(AltUOMId);
                        $("#ddl_UOM").val(UOMId);
                        $("#ddl_UOM").prop("display", "none");

                    }
                    //cAltUOMQuantity.SetValue(calcQuantity);
                }

            }

        });

        var UOMId = 0;
        var AltUOMId = 0;
        var Product_ID = gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 18);
        if (Productdetails == "") {
            $.ajax({
                type: "POST",
                url: "/BOMEntry/AutoPopulateAltQuantity",
                data: JSON.stringify({ ProductID: Product_ID }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    //alert(msg.d[0].packing_quantity)
                    $.each(data, function (i, data) {
                        //alert(data.AltUOMId)
                        if (data.AltUOMId != 0) {
                            //packingQuantity = data.packing_quantity;
                            //sProduct_quantity = data.sProduct_quantity;
                            AltUOMId = data.AltUOMId;
                            UOMId = data.UOMId;
                            $("#ddl_ALTUOM").val(AltUOMId);
                            $("#ddl_UOM").val(UOMId);
                        }
                        else {
                            //packingQuantity = 0;
                            //sProduct_quantity = 0;
                            AltUOMId = 0;
                            UOMId = 0;
                        }
                    });
                }
            });

        }
    }
    //var globalRowIndex = 0;
    function PopulateMultiUomAltQuantity() {
        var Productdetails = $("#hdnProDetString").val()
        gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex);
        var otherdet = {};
        var Quantity = $("#UOMQuantity").val();
        otherdet.Quantity = Quantity;
        //var UomId = ccmbUOM.GetValue();
        var UomId = $("#ddl_UOM").val();
        otherdet.UomId = UomId;
        //var Productdetails = (grid.GetEditor('ProductID').GetText() != null) ? grid.GetEditor('ProductID').GetText() : "0";
        //gridBOMProductEntryList.GetEditor('ProductName').GetText()   gridBOMProductEntryList.GetEditor('ProductId').SetText(ProductID)
        //var Productdetails = (gridBOMProductEntryList.GetEditor('ProductId').GetText() != null) ? gridBOMProductEntryList.GetEditor('ProductId').GetText() : "0";
        //var Productdetails = (gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 'sProduct_Id') != null) ? gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 'sProduct_Id') : "0";
        //var ProductID = Productdetails.split("|")[0];
        var ProductID = gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 1)
        otherdet.ProductID = ProductID;
        var AltUomId = $("#ddl_ALTUOM").val();
        otherdet.AltUomId = AltUomId;

        $.ajax({
            type: "POST",
            url: "/BOMEntry/GetPackingQuantity",
            data: JSON.stringify(otherdet),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            success: function (data) {
                // debugger;
                //alert(msg.d[0].packing_quantity)
                $.each(data, function (i, data) {
                    //body += "<td>" + data.plan_table_name + "</td>";
                    if (data.packing_quantity != 0) {
                        var packingQuantity = data.packing_quantity;
                        var sProduct_quantity = data.sProduct_quantity;
                    }
                    else {
                        var packingQuantity = 0;
                        var sProduct_quantity = 0;
                    }
                });

                var uomfactor = 0
                if (sProduct_quantity != 0 && packingQuantity != 0) {
                    uomfactor = parseFloat(packingQuantity / sProduct_quantity).toFixed(4);
                    $('#hddnuomFactor').val(parseFloat(packingQuantity / sProduct_quantity));
                }
                else {
                    $('#hddnuomFactor').val(0);
                }

                var uomfac_Qty_to_stock = $('#hddnuomFactor').val();
                var Qty = $("#UOMQuantity").val();
                var calcQuantity = parseFloat(Qty * uomfac_Qty_to_stock).toFixed(4);

                $("#AltUOMQuantity").val(calcQuantity);
                //cAltUOMQuantity.SetValue(calcQuantity);

            }
        });
    }
    function CalcBaseQty() {
        //debugger;



        var Productdetails = $("#hdnProDetString").val();
        var PackingQtyAlt = 0;
        var PackingQty = 0;
        var PackingSaleUOM = 0;


        var ProductID = Productdetails.split("|")[0];


        $.ajax({
            type: "POST",
            url: "/BOMEntry/AutoPopulateAltQuantity",
            data: JSON.stringify({ ProductID: ProductID }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                $.each(data, function (i, data) {
                    //body += "<td>" + data.plan_table_name + "</td>";
                    //alert(data.sProduct_quantity)
                    if (data.AltUOMId != 0) {
                        PackingQtyAlt = data.packing_quantity;  // Alternate UOM selected from Product Master (tbl_master_product_packingDetails.packing_quantity)
                        PackingQty = data.sProduct_quantity;  // Alternate UOM selected from Product Master (tbl_master_product_packingDetails.sProduct_quantity)
                        PackingSaleUOM = data.AltUOMId;  // Alternate UOM selected from Product Master (tbl_master_product_packingDetails.packing_saleUOM)
                    }
                    else {
                        PackingQtyAlt = 0;  // Alternate UOM selected from Product Master (tbl_master_product_packingDetails.packing_quantity)
                        PackingQty = 0;  // Alternate UOM selected from Product Master (tbl_master_product_packingDetails.sProduct_quantity)
                        PackingSaleUOM = 0;  // Alternate UOM selected from Product Master (tbl_master_product_packingDetails.packing_saleUOM)
                    }
                    if (PackingQtyAlt == "") {
                        PackingQtyAlt = 0
                    }
                    if (PackingQty == "") {
                        PackingQty = 0
                    }

                    // if Base UOM of product is not same as the Alternate UOM selected from Product Master, then Calculation of Base Quantity will not happen
                    if ($("#ddl_ALTUOM").val() != PackingSaleUOM) {
                        PackingQtyAlt = 0;
                        PackingQty = 0;
                    }

                    var BaseQty = 0
                    if (PackingQtyAlt > 0) {
                        var ConvFact = PackingQty / PackingQtyAlt;
                        //var altQty = cAltUOMQuantity.GetValue();
                        var altQty = $("#AltUOMQuantity").val();

                        if (ConvFact > 0) {
                            var BaseQty = (altQty * ConvFact).toFixed(4);
                            $("#UOMQuantity").val(BaseQty);
                        }
                    }
                    else {
                        $("#UOMQuantity").val("0.0000");
                    }
                });
            }
        });
        //alert(PackingQty)


    }
    function SaveMultiUOM() {
        //debugger;
        var html = '';
        var otherdet = {};
        var qnty = $("#UOMQuantity").val();
        var UomId = $("#ddl_UOM option:selected").val();
        var UomName = $("#ddl_UOM option:selected").text();
        var AltQnty = parseFloat($("#AltUOMQuantity").val()).toFixed(4);
        var AltUomId = $("#ddl_ALTUOM option:selected").val();
        var AltUomName = $("#ddl_ALTUOM option:selected").text();
        var srlNo = gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 1);
        var Productdetails = $("#hdnProDetString").val();
        //var ProductID = $("#hdnProDetString").val().split("|")[0];
        var ProductID = gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 18);
        if (ProductID == "") {
            ProductID = hdProductID.value;
        }
        var BaseRate = $("#cmbBaseRate").val();
        var AltRate = parseFloat($("#cmbAltRate").val()).toFixed(3);
        var UpdateRow = 'False';
        if ($("#chkUpdateRow").prop("checked")) {
            UpdateRow = 'True';
        }
        //if (qnty == null || qnty == "" || qnty == "0.0000") {
        //    //alert("Please enter Base Quantity.");
        //    $("#UOMQuantity").focus();
        //    return false;
        //}
        //if (BaseRate == null || BaseRate == "" || BaseRate == "0.000" || BaseRate == "0") {
        //    //alert("Please enter Base Rate.");
        //    $("#cmbBaseRate").focus();
        //    return false;
        //}
        //if (AltUomId == null || AltUomId == "" || AltUomId == "0") {
        //    //alert("Please select alt. UOM.");
        //    $("#ddl_ALTUOM").focus();
        //    return false;
        //}
        //if (AltUomId == UomId) {
        //    alert("Alt Uom and Base Uom should be different.");
        //    $("#ddl_ALTUOM").focus();
        //    return false;
        //}
        //if (AltQnty == null || AltQnty == "" || AltQnty == "0.0000" || AltQnty == "0") {
        //    //alert("Please enter Alt Quantity.");
        //    $("#AltUOMQuantity").focus();
        //    return false;
        //}
        //if (AltRate == null || AltRate == "" || AltRate == "0.000" || AltRate == "0") {
        //    //alert("Please enter Alt Rate.");
        //    $("#cmbAltRate").focus();
        //    return false;
        //}
        if (srlNo != "" && UomId != "" && UomName != "" && AltUomId != "" && ProductID != "" && AltUomId != null && AltUomName != "" && AltQnty != "0.0000") {
            if ((qnty != "0.0000" && UpdateRow == 'True') || (qnty == "0.0000" && UpdateRow == 'False') || (qnty != "0.0000" && UpdateRow == 'False')) {
                var btn_txt = $("#btnMUltiUOM").text();
                if ($("#btnMUltiUOM").text() == "Add") {
                    otherdet.Type = 'SaveDisplay';
                    otherdet.MultiUOMSR_id = 0;
                }
                else if ($("#btnMUltiUOM").text() == "Update") {
                    otherdet.Type = 'UpdateRow';
                    otherdet.MultiUOMSR_id = $("#hdnMultiUOMSR").val();
                }

                otherdet.srlNo = srlNo;
                otherdet.qnty = qnty;
                otherdet.UomName = UomName;
                otherdet.AltUomName = AltUomName;
                otherdet.AltQnty = AltQnty;
                otherdet.UomId = UomId;
                otherdet.AltUomId = AltUomId;
                otherdet.ProductID = ProductID;
                otherdet.BaseRate = BaseRate;
                otherdet.AltRate = AltRate;
                otherdet.UpdateRow = UpdateRow;

                $.ajax({
                    type: "POST",
                    url: "/BOMEntry/MultiUomGridTemp",
                    data: JSON.stringify(otherdet),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    async: false,
                    success: function (data) {
                        if (data != "Duplicate Alt UOM") {
                            $('#datatableMultiUom tbody').empty();
                            $.each(data, function (i, data) {
                                //pk = FnGetEncryptdata(data.membermasterreq_id);
                                //ctr++;
                                //var table = $('#datatableMultiUom').DataTable();
                                //table.destroy();

                                var body = "<tr>";
                                body += "<td>" + data.Quantity + "</td>";
                                body += "<td>" + data.UOM + "</td>";
                                body += "<td>" + data.BaseRate + "</td>";
                                body += "<td>" + data.AltUOM + "</td>";
                                body += "<td>" + data.AltQuantity + "</td>";
                                body += "<td>" + data.AltRate + "</td>";
                                body += "<td>" + data.UpdateRow + "</td>";
                                //alert(data.MultiUOMSR)
                                //body += '<td><a class="iq-bg-primary" data-toggle="tooltip" data-placement="top" title="" data-original-title="Edit" href="/NDMaster/NDMember/MemberMasterReqEdit?mid=' + data.SrlNo + '" ><i class="ri-pencil-line"></i></a></td>';
                                body += '<td><a href="javascript:void(0);" onclick="Edit_MultiUom(' + data.MultiUOMSR + ')" title="Edit"><img src="/assests/images/Edit.png" /></a>&nbsp&nbsp&nbsp<a href="javascript:void(0);" onclick="Delete_MultiUom(' + data.MultiUOMSR + ')" title="Delete"><img src="/assests/images/Delete.png" /></a></td>';
                                body += "</tr>";
                                $("#datatableMultiUom tbody").append(body);
                            });
                        }
                        else {
                            alert(data)
                        }
                        $("#UOMQuantity").val("0.0000");
                        //$("#ddl_UOM").val("");
                        $("#AltUOMQuantity").val("0.0000");
                        $("#ddl_ALTUOM").val(1);
                        $("#cmbBaseRate").val("0.000");
                        $("#cmbAltRate").val("0.000");
                        $("#chkUpdateRow").prop("checked", false);

                    }
                });


                if ($("#btnMUltiUOM").text() == "Update") {
                    $("#btnMUltiUOM").text("Add")
                }

                $('#Popup_MultiUOM').modal('show');
                OpenMultiUomPopUp();
            }
        }

    }

    function OpenMultiUomPopUp() {
        //alert("hi")
        $('#Popup_MultiUOM').modal('show');
    }
    function Edit_MultiUom(MultiUOMSR) {
        //cbtnMUltiUOM.SetText("Update");
        $("#btnMUltiUOM").text("Update")
        //cgrid_MultiUOM.PerformCallback('EditData~' + keyValue + '~' + SrlNo);
        $("#hdnMultiUOMSR").val(MultiUOMSR)
        var otherdet = {};
        otherdet.MultiUOMSR = MultiUOMSR;
        $.ajax({
            type: "POST",
            url: "/BOMEntry/MultiUomGridTempEdit",
            data: JSON.stringify(otherdet),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            success: function (data) {
                $.each(data, function (i, data) {
                    $("#UOMQuantity").val(data.Quantity);
                    //$("#ddl_UOM").val("");
                    $("#AltUOMQuantity").val(data.AltQuantity);
                    $("#ddl_ALTUOM").val(data.AltUomId);
                    $("#cmbBaseRate").val(data.BaseRate);
                    $("#cmbAltRate").val(data.AltRate);
                    //alert(data.UpdateRow)
                    if (data.UpdateRow == "True") {
                        $("#chkUpdateRow").prop("checked", data.UpdateRow)
                    }
                    else {
                        $("#chkUpdateRow").prop("checked", false)
                    }

                });
            }
        });
    }
    function Delete_MultiUom(MultiUOMSR) {
        $("#hdnMultiUOMSR").val(MultiUOMSR)
        var otherdet = {};
        otherdet.MultiUOMSR_id = MultiUOMSR;
        otherdet.Type = 'Delete';
        $.ajax({
            type: "POST",
            url: "/BOMEntry/MultiUomGridTemp",
            data: JSON.stringify(otherdet),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            success: function (data) {
                $('#datatableMultiUom tbody').empty();
                $.each(data, function (i, data) {
                    var body = "<tr>";
                    body += "<td>" + data.Quantity + "</td>";
                    body += "<td>" + data.UOM + "</td>";
                    body += "<td>" + data.BaseRate + "</td>";
                    body += "<td>" + data.AltUOM + "</td>";
                    body += "<td>" + data.AltQuantity + "</td>";
                    body += "<td>" + data.AltRate + "</td>";
                    body += "<td>" + data.UpdateRow + "</td>";
                    //alert(data.MultiUOMSR)
                    //body += '<td><a class="iq-bg-primary" data-toggle="tooltip" data-placement="top" title="" data-original-title="Edit" href="/NDMaster/NDMember/MemberMasterReqEdit?mid=' + data.SrlNo + '" ><i class="ri-pencil-line"></i></a></td>';
                    body += '<td><a href="javascript:void(0);" onclick="Edit_MultiUom(' + data.MultiUOMSR + ')" title="Edit"><img src="/assests/images/Edit.png" /></a>&nbsp&nbsp&nbsp<a href="javascript:void(0);" onclick="Delete_MultiUom(' + data.MultiUOMSR + ')" title="Delete"><img src="/assests/images/Delete.png" /></a></td>';
                    body += "</tr>";
                    $("#datatableMultiUom tbody").append(body);
                });

            }
        });
    }
    function SaveMultiUomFn() {
        var Productdetails = $("#hdnProDetString").val();
        //var ProductID = Productdetails.split("|")[0];
        var ProductID = gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 1)
        var otherdet = {};
        otherdet.ProductID = ProductID;
        $.ajax({
            type: "POST",
            url: "/BOMEntry/AltQntyMultiUomGrid",
            data: JSON.stringify(otherdet),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            success: function (data) {
                if (data != "Invalid") {
                    $.each(data, function (i, data) {

                            //gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 16);
                            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 9);
                            var FixedAltQty = parseFloat(data.AltQuantity).toFixed(4);
                            gridBOMProductEntryList.GetEditor("AltQuantity").SetValue(FixedAltQty);
                            //gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 17);
                            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 10);
                            gridBOMProductEntryList.GetEditor("AltUom").SetValue(data.AltUOM);
                            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 6);
                            gridBOMProductEntryList.GetEditor("ProductQty").SetValue(data.Quantity);
                            $("#Popup_MultiUOM").hide();


                    });
                }
                else {
                            jAlert("Please add atleast one Alt. Quantity with Update Row as checked.")
                }
            }
        });
    }
    //End of rev Pratik
    function BOMGridSetTotalAmount(s, e) {
        ////debugger;

        var ToTalAmount = 0;
        for (var i = 500; i > -500; i--) {
            if (gridBOMProductEntryList.GetRow(i)) {
                var Amountval = gridBOMProductEntryList.batchEditApi.GetCellValue(i, 'Amount');
                if (Amountval != "" && Amountval != null && Amountval != undefined) {
                    var ToTalAmount = parseFloat(parseFloat(ToTalAmount) + parseFloat(Amountval)).toFixed(2);
                    $('#txtGridProductEntryTotalAmount').val(ToTalAmount);
                    $('#txtActualComponentCost').val(ToTalAmount);



                }
            }
        }


        var txtActualAdditionalCost = $('#txtActualAdditionalCost').val();
        if (txtActualAdditionalCost == "NaN" || txtActualAdditionalCost == "") {
            txtActualAdditionalCost = "0.00";
        }
        var txtTotalResourceCost = $('#txtTotalResourceCost').val();
        if (txtTotalResourceCost == "" || txtTotalResourceCost == "NaN") {
            txtTotalResourceCost = "0.00";
        }
        var txtActualComponentCost = $('#txtActualComponentCost').val();
        if (txtActualComponentCost == "NaN" || txtActualComponentCost == "") {
            txtActualComponentCost = "0.00";
        }
        var TotalActualProductCost = parseFloat(parseFloat(txtActualAdditionalCost) + parseFloat(txtTotalResourceCost) + parseFloat(txtActualComponentCost)).toFixed(2);
        $('#txtActualProductCost').val(TotalActualProductCost);

        //var ToTalAmount = $('#txtGridProductEntryTotalAmount').val();
        //var Amountval = gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 'Amount');
        //if (ToTalAmount != "" || ToTalAmount != undefined || ToTalAmount != null) {
        //    ToTalAmount = parseFloat(0).toFixed(2);
        //}
        //if (Amountval != "" && Amountval != null && Amountval != undefined) {
        //    var calTotalAmount = parseFloat(parseFloat(ToTalAmount) + parseFloat(Amountval)).toFixed(2);
        //    $('#txtGridProductEntryTotalAmount').val(calTotalAmount);
        //}

    }

    function BOMGridResourceSetTotalAmount(s, e) {

        var ToTalAmount = 0;
        for (var i = 500; i > -500; i--) {
            if (gridBOMResourcesList.GetRow(i)) {
                var Amountval = gridBOMResourcesList.batchEditApi.GetCellValue(i, 'Amount');
                if (Amountval != "" && Amountval != null && Amountval != undefined) {
                    var ToTalAmount = parseFloat(parseFloat(ToTalAmount) + parseFloat(Amountval)).toFixed(2);
                    $('#txtGridResourcesTotalAmount').val(ToTalAmount);
                    $('#txtTotalResourceCost').val(ToTalAmount);


                }
            }
        }

        var txtActualAdditionalCost = $('#txtActualAdditionalCost').val();
        if (txtActualAdditionalCost == "NaN" || txtActualAdditionalCost == "") {
            txtActualAdditionalCost = "0.00";
        }
        var txtTotalResourceCost = $('#txtTotalResourceCost').val();
        if (txtTotalResourceCost == "" || txtTotalResourceCost == "NaN") {
            txtTotalResourceCost = "0.00";
        }
        var txtActualComponentCost = $('#txtActualComponentCost').val();
        if (txtActualComponentCost == "NaN" || txtActualComponentCost == "") {
            txtActualComponentCost = "0.00";
        }
        var TotalActualProductCost = parseFloat(parseFloat(txtActualAdditionalCost) + parseFloat(txtTotalResourceCost) + parseFloat(txtActualComponentCost)).toFixed(2);
        $('#txtActualProductCost').val(TotalActualProductCost);
    }

    function SetGridBOMProduct(Id, Name, e) {
        //debugger;
        if (Id != "") {
            var data = Id.split('|');
            var Details_ID = data[0];
            var Production_ID = data[1];
            var BOM_No = data[2];
            var REV_No = data[3];
            var BOM_Date = data[4];
            var Rate = data[5];
            var REV_Date = data[6];

            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 11);
            gridBOMProductEntryList.GetEditor('BOMNo').SetText(BOM_No);

            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 12);
            gridBOMProductEntryList.GetEditor('RevNo').SetText(REV_No);

            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 13);
            gridBOMProductEntryList.GetEditor('RevDate').SetText(REV_Date);

            //gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 7);
            //gridBOMProductEntryList.GetEditor('Price').SetText(Rate);

            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 18);
            gridBOMProductEntryList.GetEditor('Tag_Details_ID').SetText(Details_ID);

            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 19);
            gridBOMProductEntryList.GetEditor('Tag_Production_ID').SetText(Production_ID);

            //BOMGridSetAmount("", "");

            setTimeout(function () {
                gridBOMProductEntryList.batchEditApi.EndEdit();
                gridBOMProductEntryList.batchEditApi.StartEdit();
                //BOMGridSetTotalAmount("", "");
            }, 1000);

        }
        $('#GridBOMlistModel').modal('hide');

    }

    //function OnInit(s, e) {
    //   //debugger;
    //    //var grid = MVCxClientGridView.Cast(s);
    //    //grid.batchEditApi.ValidateRows();
    //}

    function OnGridViewEndCallback(s, e) {
        //debugger;
        if (gridBOMResourcesList.batchEditApi.HasChanges()) {
            gridBOMResourcesList.UpdateEdit();
        }
    }

    function OnResourcesEndCallback() {
        //debugger;
        AddNewRowGridResources();
        $('#BOMNo').val('');
        var BOMDate = GetServerDateFormat(BOMDate_dt.GetValue());
        //var BOMDate = $('#BOMDate_dt').val();
        $('#hdnFinishedItem').val('');
        $('#FinishedQty').val(parseFloat(0).toFixed(4));
        $('#FinishedUom').val('');
        $('#slcbomtype').val($("#slcbomtype option:first").val());
        $('#RevisionNo').val('');
        $('#ddlBankBranch').val($("#ddlBankBranch option:first").val());
        $('#ddlWarehouse').val($("#ddlWarehouse option:first").val());
        $('#hdnSchemaId').val('');
        $('#txtActualAdditionalCost').val(parseFloat(0).toFixed(4));
        $('#txtGridProductEntryTotalAmount').val(parseFloat(0).toFixed(2));
        $('#txtGridResourcesTotalAmount').val(parseFloat(0).toFixed(2));
        $('#ddlSchema').val($("#ddlSchema option:first").val());
        $('#BOMNo').val('');
        $('#EbtnFinishedItem').hide();
        $('#EBOMNo').hide();
        $('#EBOMDate_dt').hide();
        $('#EbtnFinishedItem').hide();
        $('#EFinishedQty').hide();
        $('#EFinishedQty').hide();
        $('#ERevisionNo').hide();
        $('#ERevisionDate_dt').hide();
        $('#EddlBankBranch').hide();
        btnFinishedItem.Clear();
        $('#FinishedUom').val('');
        $('#hdnDetailsID').val(0);
        Scheme_ValueChange();
        ////debugger;
        if (Message == "duplicate" && DetailsID == 0 && ProductionID == 0) {
            savemode = "";
            if (Message == "duplicate") {
                jAlert('This BOM no already present!');
                return false;
            }
            else {
                jAlert('Please try again later.');
                return false;
            }
            Message = "";
        }
        else {
            var newDetailsID = DetailsID;
            if (DetailsID > 0 && ProductionID > 0 && GBOMNo != "") {
                ProductionID = 0;
                DetailsID = 0;
                jAlert('BOM Number : ' + GBOMNo + ' saved successfully.', 'Alert!', function (r) {
                    if (r) {
                        afterSave(savemode, newDetailsID);
                        if (savemode == "Exit") {
                            setTimeout(function () {
                                var url = $('#hdnBOMListPage').val();
                                window.location.href = url;
                            }, 500);
                        }
                    }
                });
                // jAlert('BOM Number : ' + GBOMNo + ' Successfully saved.');
            }
            else {
                ProductionID = 0;
                DetailsID = 0;
                savemode = "";
                jAlert('Please try again later.');
                return false;
            }
            Message = "";
        }
    }
    function afterSave(savemode, newDetailsID) {

        if (savemode == 'Exit') {
            if (document.getElementById('hdnIsAutoPrint').value == 1) {
                reportName = "ManufacturingBOM~D";
                window.open("../../OMS/Reports/REPXReports/RepxReportViewer.aspx?Previewrpt=" + reportName + '&modulename=ManufacturingBOM&id=' + newDetailsID + '&PrintOption=1', '_blank');
            }

            setTimeout(function () {
                var url = $('#hdnBOMListPage').val();
                window.location.href = url;
            }, 500);

        }
        else {
            if (document.getElementById('hdnIsAutoPrint').value == 1) {
                reportName = "ManufacturingBOM~D";
                window.open("../../OMS/Reports/REPXReports/RepxReportViewer.aspx?Previewrpt=" + reportName + '&modulename=ManufacturingBOM&id=' + newDetailsID + '&PrintOption=1', '_blank');
            }
            if (savemode == "Exit") {
                setTimeout(function () {
                    var url = $('#hdnBOMListPage').val();
                    window.location.href = url;
                }, 500);
            }
        }
    }

    function OnEndCallback(s, e) {
        ////debugger;
        DetailsID = s.cpDetailsID;
        ProductionID = s.cpProductionID;
        GBOMNo = s.cpBOMNo;
        Message = s.cpMessage;
        $('#hdnDetailsID').val(DetailsID);
        if (s.cpBatchUpdate == "1") {

            s.cpBatchUpdate = "0";

            if (gridBOMResourcesList.batchEditApi.HasChanges()) {
                gridBOMResourcesList.UpdateEdit();

                setTimeout(function () {
                    OnResourcesEndCallback();
                }, 1500);

            }
            else {
                var newDetailsID = DetailsID;
                if (DetailsID > 0 && ProductionID > 0 && GBOMNo != "") {
                    ProductionID = 0;
                    DetailsID = 0;
                    jAlert('BOM Number : ' + GBOMNo + ' saved successfully.', 'Alert!', function (r) {
                        if (r) {
                            afterSave(savemode, newDetailsID);
                            if (savemode == "Exit") {
                                setTimeout(function () {
                                    var url = $('#hdnBOMListPage').val();
                                    window.location.href = url;
                                }, 500);
                            }
                        }
                    });
                    // jAlert('BOM Number : ' + GBOMNo + ' Successfully saved.');
                }
                else {
                    ProductionID = 0;
                    DetailsID = 0;
                    savemode = "";
                    jAlert('Please try again later.');
                    return false;
                }
                Message = "";
            }

        }
        //else {
        AddNewRowWithSl();
        $('#txtGridProductEntryTotalAmount').val(parseFloat(0).toFixed(2));
        if (Message == "duplicate" && hasmsg == 0) {
            jAlert('This BOM no already present!');
            hasmsg = 1;
            return false;
        }
        //else {
        //    jAlert('Please try again later.');
        //    return false;
        //}
        //}

    }

    function ProductListkeydown(e) {
        if (e.code == "Enter" || e.code == "NumpadEnter") {
            if ($("#txtProductName").val() != '') {
                Productlist($("#txtProductName").val(), null);
            }
        }
        else if (e.code == "ArrowDown") {
            if ($("input[ProductIndex=0]"))
                $("input[ProductIndex=0]").focus();
        }
    }
    function PartNoListkeydown(e) {
        if (e.code == "Enter" || e.code == "NumpadEnter") {
            if ($("#txtPartNoCode").val() != '') {
                PartNolist($("#txtPartNoCode").val(), 'PartNo');
            }
        }
        else if (e.code == "ArrowDown") {
            if ($("input[PartNoIndex=0]"))
                $("input[PartNoIndex=0]").focus();
        }
    }
    var iindexprod = 0;
    var finishedproductlist = 0;
    var gridproductlist = 0;
    var gridnonproductlist = 0;
    function GridProductListkeydown(e) {

        if (e.code == "Enter" || e.code == "NumpadEnter") {
            if ($("#txtGridProductName").val() != '') {
                if (typemodal == 'nonInventory') {
                    GridNonInventoryProductlist($("#txtGridProductName").val(), "nonInventory", globalrowindex2);
                    gridnonproductlist = 1;
                }
                else {
                    GridProductlist($("#txtGridProductName").val(), typemodal, null);
                    gridproductlist = 1;
                }
            }
        }
        else if (e.code == "ArrowDown") {
            if ($("input[GridProductIndex=" + 0 + "]")) {
                $("input[GridProductIndex=" + 0 + "]").focus();
                iindexprod++;
            }
            if ($("input[NonIProductIndex=" + 0 + "]")) {
                $("input[NonIProductIndex=" + 0 + "]").focus();
                iindexprod++;
            }
        }
    }

    function GridBomListkeydown(e) {
        if (e.code == "Enter" || e.code == "NumpadEnter") {
            if ($("#txtBOMName").val() != '') {
                GetBOMList($("#txtBOMName").val(), null);
            }
        }
        else if (e.code == "ArrowDown") {
            if ($("input[GridProductIndex=" + 0 + "]")) {
                $("input[GridProductIndex=" + 0 + "]").focus();
                iindexprod++;
            }
            if ($("input[NonIProductIndex=" + 0 + "]")) {
                $("input[NonIProductIndex=" + 0 + "]").focus();
                iindexprod++;
            }
        }
    }

    $(function () {
        PopulateWareHouseData();
        PopulateNumberingSchemeData();
        $(document).keyup(function (e) {
            if (e.key === "Escape") {

                if (finishedproductlist == 1) {
                    finishedproductlist = 0;
                    setTimeout(function () {
                        $('#FinishedQty').select();
                        $('#FinishedQty').focus();
                    }, 500);

                }

                if (warehousefocus == 1) {
                    warehousefocus = 0;
                    $('#GridWarehouselistModel').modal('hide');
                    setTimeout(function () {
                        var localcolumn = gridBOMProductEntryList.batchEditApi.GetColumnIndex('Price');
                        gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, localcolumn);
                    }, 500);

                }


                if (bomlinkindex == 1) {
                    bomlinkindex = 0;
                    setTimeout(function () {
                        var localcolumn = gridBOMProductEntryList.batchEditApi.GetColumnIndex('Remarks');
                        gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, localcolumn);
                    }, 500);

                }

                if (gridproductlist == 1) {
                    gridproductlist = 0;
                    setTimeout(function () {
                        var localcolumn = gridBOMProductEntryList.batchEditApi.GetColumnIndex('ProductQty');
                        gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, localcolumn);
                    }, 500);

                }

                if (gridnonproductlist == 1) {
                    gridnonproductlist = 0;
                    setTimeout(function () {
                        var localcolumn = gridBOMResourcesList.batchEditApi.GetColumnIndex('ProductQty');
                        gridBOMResourcesList.batchEditApi.StartEdit(globalrowindex2, localcolumn);
                    }, 500);

                }
            }
            //alert(e.keyCode + "|" + e.altKey);
            if (e.keyCode == 88 && e.altKey == true) {
                BOMEntrySave('Exit');
            }

            if (event.keyCode == 83 && event.altKey == true) {
                BOMEntrySave('New');
            }
        });


    });

    function PopulateWareHouseData() {
        var BankBranchID = $('#ddlBankBranch option:selected').val();
        $.ajax({
            type: "POST",
            url: "@Url.Action("getWarehouseRecord", "BOMEntry")",
            data: { branchid: BankBranchID },
            success: function (response) {
                $('#ddlWarehouse').html('');
                var html = "";
                var hdnProductWarehouseID = $('#hdnProductWarehouseID').val();
                for (var i = 0; i < response.length; i++) {
                    if (hdnProductWarehouseID > 0) {
                        if (hdnProductWarehouseID == response[i].WarehouseID) {
                            html = html + "<option value='" + response[i].WarehouseID + "' selected>" + response[i].WarehouseName + "</option>";
                        }
                        else {
                            html = html + "<option value='" + response[i].WarehouseID + "'>" + response[i].WarehouseName + "</option>";
                        }
                    }
                    else {
                        html = html + "<option value='" + response[i].WarehouseID + "'>" + response[i].WarehouseName + "</option>";
                    }

                }
                $('#ddlWarehouse').html(html);

            }
        });
    }

    function PopulateNumberingSchemeData() {
        var type = $('#slcbomtype option:selected').val();
        $.ajax({
            type: "POST",
            url: "@Url.Action("getNumberingSchemeRecord", "BOMEntry")",
            data: { type: type },
            success: function (response) {
                var html = "";
                var hdnBOM_SCHEMAID = $('#hdnBOM_SCHEMAID').val();
                for (var i = 0; i < response.length; i++) {
                    if (hdnBOM_SCHEMAID != '') {
                        html = html + "<option value='" + response[i].SchemaID + "' selected>" + response[i].SchemaName + "</option>";
                    }
                    else {
                        html = html + "<option value='" + response[i].SchemaID + "'>" + response[i].SchemaName + "</option>";
                    }
                }
                $('#ddlSchema').html(html);


                //$("#ddlSchema > option").each(function () {
                //    var str = this.value;
                //    var n = str.startsWith("1056");
                //    alert(this.value);
                //});
            }
        });
    }

    function addNewRowTogridResources() {
        gridBOMResourcesList.batchEditApi.EndEdit();
        AddNewRowGridResources();
        index = globalrowindex2;
        setTimeout(function () {
            gridBOMResourcesList.batchEditApi.EndEdit();
            gridBOMResourcesList.batchEditApi.StartEdit(index, 1);
        }, 200);

    }

    function addNewRowTogrid() {
        gridBOMProductEntryList.batchEditApi.EndEdit();
        //gridBOMProductEntryList.AddNewRow();
        // gridBOMProductEntryList.AddNewRow();
        //

        AddNewRowWithSl();
        index = globalrowindex;


        setTimeout(function () {
            gridBOMProductEntryList.batchEditApi.EndEdit();
            gridBOMProductEntryList.batchEditApi.StartEdit(index, 1);
        }, 200);

    }

    function BOMGridSetAmount(s, e) {
        gridBOMProductEntryList.batchEditApi.EndEdit();
        //var Price = s.GetValueString();
        var Price = gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 'Price');
        var Qty = gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 'ProductQty');
        if (Price != "" && Qty != "") {
            var amount = parseFloat((parseFloat(Qty).toFixed(4)) * (parseFloat(Price).toFixed(2))).toFixed(2);

            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 13);
            gridBOMProductEntryList.GetEditor('Amount').SetText(amount);

            if (gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 14) == null) {
                gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 14);
                gridBOMProductEntryList.GetEditor('BOMNo').SetText(" ");
            }

            if (gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 15) == null) {
                gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 15);
                gridBOMProductEntryList.GetEditor('RevNo').SetText(" ");
            }

            if (gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 16) == null) {
                gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 16);
                gridBOMProductEntryList.GetEditor('RevDate').SetText(" ");
            }
        }
        //else {
        //    gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 7);
        //}
        //gridBOMProductEntryList.batchEditApi.EndEdit();
        //gridBOMProductEntryList.batchEditApi.StartEdit();
        //BOMGridSetTotalAmount(s, e);

        BOMGridSetTotalAmount("", "");

    }

    function BOMGridSetAmountQty(s, e) {
        gridBOMProductEntryList.batchEditApi.EndEdit();
        //var Price = s.GetValueString();
        var Price = gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 'Price');
        var Qty = gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 'ProductQty');
        if (Price != "" && Qty != "") {
            var amount = parseFloat((parseFloat(Qty).toFixed(4)) * (parseFloat(Price).toFixed(2))).toFixed(2);

            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 13);
            gridBOMProductEntryList.GetEditor('Amount').SetText(amount);

            if (gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 14) == null) {
                gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 14);
                gridBOMProductEntryList.GetEditor('BOMNo').SetText(" ");
            }

            if (gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 15) == null) {
                gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 15);
                gridBOMProductEntryList.GetEditor('RevNo').SetText(" ");
            }

            if (gridBOMProductEntryList.batchEditApi.GetCellValue(globalrowindex, 16) == null) {
                gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 16);
                gridBOMProductEntryList.GetEditor('RevDate').SetText(" ");
            }


        }


        BOMGridSetTotalAmount(s, e);



        gridBOMProductEntryList.batchEditApi.EndEdit();
        var localindex = gridBOMProductEntryList.batchEditApi.GetColumnIndex('ProductUOM');

        gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, localindex);
        //else {
        //    gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 7);
        //}
        //gridBOMProductEntryList.batchEditApi.EndEdit();
        //gridBOMProductEntryList.batchEditApi.StartEdit();
        //BOMGridSetTotalAmount(s, e);

    }

    function BOMResourceGridSetAmount(s, e) {
        gridBOMResourcesList.batchEditApi.EndEdit();
        //var Price = s.GetValueString();
        var Price = gridBOMResourcesList.batchEditApi.GetCellValue(globalrowindex2, 'Price');
        var Qty = gridBOMResourcesList.batchEditApi.GetCellValue(globalrowindex2, 'ProductQty');
        if (Price != "" && Qty != "") {
            var amount = parseFloat((parseFloat(Qty).toFixed(4)) * (parseFloat(Price).toFixed(2))).toFixed(2);

            gridBOMResourcesList.batchEditApi.StartEdit(globalrowindex2, 8);
            gridBOMResourcesList.GetEditor('Amount').SetText(amount);
        }

        // BOMGridResourceSetTotalAmount("", "");
        BOMGridResourceSetTotalAmount();
    }

    function BOMResourceGridUOMFocus(s, e) {

        if (e.htmlEvent.key == "Tab" && e.htmlEvent.shiftKey) {
            gridBOMResourcesList.batchEditApi.EndEdit();
            var localindex = gridBOMResourcesList.batchEditApi.GetColumnIndex('ProductQty');

            gridBOMResourcesList.batchEditApi.StartEdit(globalrowindex2, localindex);
        }
    }

    function BOMResourceGridSetAmountQty(s, e) {
        gridBOMResourcesList.batchEditApi.EndEdit();
        //var Price = s.GetValueString();
        var Price = gridBOMResourcesList.batchEditApi.GetCellValue(globalrowindex2, 'Price');
        var Qty = gridBOMResourcesList.batchEditApi.GetCellValue(globalrowindex2, 'ProductQty');
        if (Price != "" && Qty != "") {
            var amount = parseFloat((parseFloat(Qty).toFixed(4)) * (parseFloat(Price).toFixed(2))).toFixed(2);

            gridBOMResourcesList.batchEditApi.StartEdit(globalrowindex2, 8);
            gridBOMResourcesList.GetEditor('Amount').SetText(amount);
        }

        BOMGridResourceSetTotalAmount("", "");

        // gridBOMProductEntryList.batchEditApi.EndEdit();
        var localindex = gridBOMResourcesList.batchEditApi.GetColumnIndex('ProductUOM');

        gridBOMResourcesList.batchEditApi.StartEdit(globalrowindex2, localindex);
    }

    //function FocusGrid() {
    //    gridBOMProductEntryList.batchEditApi.StartEdit(-1,0);
    //}

    //function RemarksLostFocus(s, e) {
    //    //gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 13);
    //    //$('.addEdcircleBtn').focus();
    //    debugger;


    //}

    var warehousefocus = 0;
    function WarehouseKeyDown(s, e) {
        console.log(e.htmlEvent.key);
        if (e.htmlEvent.key == "Enter") {

            s.OnButtonClick(0);

            $('#ddlWarehouselist').focus();
        }
    }

    function PriceKeyDown(s, e) {

        console.log(e.htmlEvent.key);
        if (e.htmlEvent.key == "Tab" && e.htmlEvent.shiftKey) {
            gridBOMProductEntryList.batchEditApi.EndEdit();
            WarehouseGotFocus();
        }
    }

    function WarehouseGotFocus() {

        var localindex = gridBOMProductEntryList.batchEditApi.GetColumnIndex('Warehouse');

        gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, localindex);

    }

    function AddRowResourceKeyDown(s, e) {
        //console.log(e.htmlEvent.key);
        if (e.htmlEvent.key == "Enter") {
            if ($('#hdnDetailsID').val() == 0) {
                addNewRowTogridResources();
            }
            else {
                addNewRowToEditResourcegrid();
            }
        }
    }

    var tempindexcount = [];
    function AddRowKeyDown(s, e) {
        //console.log(e.htmlEvent.key);
        if (e.htmlEvent.key == "Enter") {
            if ($('#hdnDetailsID').val() == 0) {
                addNewRowTogrid();
            }
            else {
                addNewRowToEditgrid();
            }
        }
        if (e.htmlEvent.key == "Tab") {
            var hdnDetailsID = $('#hdnDetailsID').val();
            if (hdnDetailsID > 0) {
                if (globalrowindex == 0) {
                    tempindexcount = [];
                }
                var tempindex = (globalrowindex + 1);
                if (gridBOMProductEntryList.batchEditApi.GetCellValue(tempindex, 'SlNO') != null && globalrowindex >= 0 && tempindexcount.includes(tempindex) == false) {
                    tempindexcount.push(tempindex);
                    gridBOMProductEntryList.batchEditApi.EndEdit();
                    setTimeout(function () {
                        var localindex = gridBOMResourcesList.batchEditApi.GetColumnIndex('ProductName');
                        gridBOMProductEntryList.batchEditApi.StartEdit(tempindex, localindex);
                    }, 500);

                    hasfoundindex = 1;
                }
                else {
                    var tempindex = -1;
                    if (gridBOMProductEntryList.batchEditApi.GetCellValue(tempindex, 'SlNO') != null && tempindexcount.includes(tempindex) == false) {
                        tempindexcount.push(tempindex);
                        gridBOMProductEntryList.batchEditApi.EndEdit();
                        setTimeout(function () {
                            var localindex = gridBOMResourcesList.batchEditApi.GetColumnIndex('ProductName');
                            gridBOMProductEntryList.batchEditApi.StartEdit(tempindex, localindex);
                        }, 500);


                    }
                }

            }
            else {


                var tempindex = (globalrowindex - 1);
                if (gridBOMProductEntryList.batchEditApi.GetCellValue(tempindex, 'SlNO') != null) {
                    gridBOMProductEntryList.batchEditApi.EndEdit();

                    setTimeout(function () {
                        var localindex = gridBOMResourcesList.batchEditApi.GetColumnIndex('ProductName');
                        gridBOMProductEntryList.batchEditApi.StartEdit(tempindex, localindex);
                    }, 500);

                }
                else {
                    var tempindex = (globalrowindex - 1);
                    if (gridBOMProductEntryList.batchEditApi.GetCellValue(tempindex, 'SlNO') != null) {

                        gridBOMProductEntryList.batchEditApi.EndEdit();
                        setTimeout(function () {
                            var localindex = gridBOMResourcesList.batchEditApi.GetColumnIndex('ProductName');
                            gridBOMProductEntryList.batchEditApi.StartEdit(tempindex, localindex);
                        }, 500);
                    }
                }
            }
        }
    }

    function BOMKeyDown(s, e) {
        console.log(e.htmlEvent.key);
        if (e.htmlEvent.key == "Enter") {

            s.OnButtonClick(0);
        }
        //if (e.htmlEvent.key == "Tab") {

        //    s.OnButtonClick(0);
        //}
    }

    function ProductKeyDown(s, e) {
        console.log(e.htmlEvent.key);
        if (e.htmlEvent.key == "Enter") {

            //if (gridBOMProductEntryList.focusedRowIndex != null && gridBOMProductEntryList.focusedRowIndex != undefined) {
            //    globalrowindex = gridBOMProductEntryList.focusedRowIndex;
            //}
            s.OnButtonClick(0);
            //OpenProductList(s, e);
        }
            //if (e.htmlEvent.key == "Tab") {
            //    //if (gridBOMProductEntryList.focusedRowIndex != null && gridBOMProductEntryList.focusedRowIndex != undefined) {
            //    //    globalrowindex = gridBOMProductEntryList.focusedRowIndex;
            //    //}
            //    s.OnButtonClick(0);
            //    //OpenProductList(s, e);
            //}
        else if (e.code == "ArrowDown") {
            if ($("input[GridProductIndex=0]"))
                $("input[GridProductIndex=0]").focus();
        }
    }

    function SetBOMFocusGrid() {
        gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 12);
    }

    function NonIProductKeyDown(s, e) {
        console.log(e.htmlEvent.key);
        if (e.htmlEvent.key == "Enter") {

            s.OnButtonClick(0);
        }
            //if (e.htmlEvent.key == "Tab") {

            //    s.OnButtonClick(0);
            //}
        else if (e.code == "ArrowDown") {
            if ($("input[NonIProductIndex=0]"))
                $("input[NonIProductIndex=0]").focus();
        }
    }

    function btnPayStructure_KeyDown(s, e) {
        if (e.htmlEvent.key == "Enter") {
            s.OnButtonClick(0);
        }
        else if (e.code == "ArrowDown") {
            if ($("input[ProductIndex=0]"))
                $("input[ProductIndex=0]").focus();
        }
    }
    function btnPartNo_KeyDown(s, e) {
        if (e.htmlEvent.key == "Enter") {
            s.OnButtonClick(0);
        }
        else if (e.code == "ArrowDown") {
            if ($("input[PartNoIndex=0]"))
                $("input[PartNoIndex=0]").focus();
        }
    }
    function ValueSelected(e, indexName) {
        if (e.code == "Enter") {
            var Id = e.target.parentElement.parentElement.cells[0].innerText;
            var name = e.target.parentElement.parentElement.cells[1].children[0].value;
            if (Id) {
                if (indexName == "ProductIndex") {
                    SetProduct(Id, name, null);
                }
                else if (indexName == "BOMIndex") {
                    SetGridBOMProduct(Id, name, null);
                }
                else if (indexName == "GridProductIndex") {
                    SetGridProduct(Id, name, null);
                }
                else if (indexName == "NonIProductIndex") {
                    SetGridNonInventoryProduct(Id, name, null);
                }
                else if (indexName == "PartNoIndex") {
                    SetPartNo(Id, name, null);
                }
                //else if (indexName == "customeraddressIndex") {
                //    SetCustomeraddress(Id, name);
                //}
                //else {
                //    SetCustomer(Id, name);
                //}
            }
        }
        else if (e.code == "ArrowDown") {
            thisindex = parseFloat(e.target.getAttribute(indexName));
            thisindex++;
            if (thisindex < 10)
                $("input[" + indexName + "=" + thisindex + "]").focus();
        }
        else if (e.code == "ArrowUp") {
            thisindex = parseFloat(e.target.getAttribute(indexName));
            thisindex--;
            if (thisindex > -1)
                $("input[" + indexName + "=" + thisindex + "]").focus();
            else {
                if (indexName == "ProductIndex")
                    $('#txtProductName').focus();
                else if (indexName == "BOMIndex")
                    $('#txtBOMName').focus();
                else if (indexName == "GridProductIndex")
                    $('#txtGridProductName').focus();
                else if (indexName == "NonIProductIndex")
                    ('#txtGridProductName').focus();
                else if (indexName == "PartNoIndex")
                    $('#txtPartNoCode').focus();
                //else
                //    $('#txtCustSearch').focus();
            }
        }

    }

    function SetFocusDesc() {
        gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 3);
        gridBOMResourcesList.batchEditApi.StartEdit(globalrowindex2, 3);
    }

    function BOMEntrySave(mode) {


        savemode = mode;
        hasmsg = 0;
        var bomno = $('#BOMNo').val();
        var BOMDate = GetServerDateFormat(BOMDate_dt.GetValue());
        var FinishedItem = $('#hdnFinishedItem').val();
        var FinishedQty = $('#FinishedQty').val();
        var FinishedUom = $('#FinishedUom').val();
        var BOMType = $('#slcbomtype option:selected').val();
        var RevisionNo = $('#RevisionNo').val();
        var RevisionDate = GetServerDateFormat(RevisionDate_dt.GetValue());
        var Unit = $('#ddlBankBranch option:selected').val();
        var WarehouseID = $('#ddlWarehouse option:selected').val();
        var SchemaID = $('#hdnSchemaId').val();
        var ActualAdditionalCost = $('#txtActualAdditionalCost').val();
        if (ActualAdditionalCost == '') {
            ActualAdditionalCost = parseFloat(0).toFixed(2);
            $('#txtActualAdditionalCost').val(ActualAdditionalCost);
        }
        var hdnRevisionNo = $('#hdnRevisionNo').val();
        var hdnDetailsID = $('#hdnDetailsID').val();
        var PartNO = $('#hdnPartNo').val();
        var ProjectMandatoryInEntry = '@ViewBag.ProjectMandatoryInEntry';
        var ProjectSelectInEntryModule = '@ViewBag.ProjectShow';
        var WhareHouseMandatory = '@ViewBag.BOMSalesInvoiceCumChallan';
        var oneproduct = "";
        var visiablerow = gridBOMProductEntryList.GetVisibleRowsOnPage();
        if (visiablerow > 0) {
            for (var i = 100; i > -500; i--) {
                if (gridBOMProductEntryList.GetRow(i)) {
                    if (oneproduct == "" || oneproduct == null) {
                        oneproduct = gridBOMProductEntryList.batchEditApi.GetCellValue(i, 'ProductName');
                    }
                }
            }
        }

        if (visiablerow > 0) {
            for (i = -1; i > -1000; i--) {
                if (gridBOMProductEntryList.GetRow(i)) {
                    var Product = gridBOMProductEntryList.GetEditor("ProductName").GetValue();
                    var IsInventory = gridBOMProductEntryList.GetEditor("IsInventory").GetValue();

                    if (Product != "" && Product != null) {
                        if (parseFloat(gridBOMProductEntryList.GetEditor("ProductQty").GetValue()) == 0) {
                            jAlert("Product qty should be greater than zero!");
                            return false;
                        }
                        if ($("#hdnIsBOMRateRequired").val() == 1) {
                            if (parseFloat(gridBOMProductEntryList.GetEditor("Price").GetValue()) == 0) {
                                jAlert("Product Price should be greater than zero!");
                                return false;
                            }
                        }


                        if (WhareHouseMandatory == "Yes") {
                            if (IsInventory == "Yes") {
                                if ((gridBOMProductEntryList.GetEditor("Warehouse").GetValue() == "") && (gridBOMProductEntryList.GetEditor("Warehouse").GetValue() == null)) {
                                    jAlert("Please select the warehouse");
                                    return false;
                                }
                            }

                        }

                    }
                }
            }

            for (var i = 0; i < 500; i++) {
                if (gridBOMProductEntryList.GetRow(i)) {
                    var Product = gridBOMProductEntryList.GetEditor("ProductName").GetValue();
                    var IsInventory = gridBOMProductEntryList.GetEditor("IsInventory").GetValue();
                    if (Product != "" && Product != null) {
                        if (parseFloat(gridBOMProductEntryList.GetEditor("ProductQty").GetValue()) == 0) {
                            jAlert("Product qty should be greater than zero!");
                            return false;
                        }
                        if ($("#hdnIsBOMRateRequired").val() == 1) {
                            if (parseFloat(gridBOMProductEntryList.GetEditor("Price").GetValue()) == 0) {
                                jAlert("Product Price should be greater than zero!");
                                return false;
                            }
                        }

                        if (WhareHouseMandatory == "Yes") {
                            if (IsInventory == "Yes") {
                                if ((gridBOMProductEntryList.GetEditor("Warehouse").GetValue() == "") && (gridBOMProductEntryList.GetEditor("Warehouse").GetValue() == null)) {
                                    jAlert("Please select the warehouse");
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        }



        if (hdnDetailsID == "") {
            RevisionNo = " ";
            RevisionDate = GetServerDateFormat(new Date);
        }
        if (oneproduct != "" && oneproduct != null) {

            if (hdnDetailsID != "") {
                if ('@ViewBag.BOMRevisionRequired' == "Yes") {
                    if (hdnDetailsID > 0 && hdnRevisionNo == RevisionNo) {
                        jAlert("Please enter new revision number to save.");
                        return false;
                    }
                }
            }
            //else {
                if (FinishedQty <= 0) {
                    $("html, body").animate({ scrollTop: 0 }, 600);
                    jAlert("Finished qty should be greater than zero!");
                    return false;
                }
                if (ProjectMandatoryInEntry == "Yes" && ProjectSelectInEntryModule == "Yes" && ProjectGridLookup.GetSelectedKeyFieldValues() == "") {
                    jAlert("Please Select Project.");
                    LoadingPanel.Hide();
                    return false;
                }

                else {

                    //if (bomno != '' && BOMDate != '' && FinishedItem != '' && FinishedQty != '' && FinishedUom != '' && BOMType != '' && RevisionNo != '' && RevisionDate != '' && Unit != '' && ActualAdditionalCost != '') {
                    if (bomno != '' && BOMDate != '' && FinishedItem != '' && FinishedQty != '' && FinishedUom != '' && BOMType != '' && Unit != '' && ActualAdditionalCost != '') {

                        if ('@ViewBag.BOMRevisionRequired' == "Yes") {
                            if (hdnDetailsID > 0 && RevisionNo != "") {
                                $.ajax({
                                    type: "POST",
                                    url: "@Url.Action("ProcessWithRevisionNumber", "BOMEntry")",
                                    data: { detailsid: hdnDetailsID, RevisionNo: RevisionNo },
                                    success: function (response) {

                                        if (response) {
                                            addNewRowToEditgrid();

                                            SuffleRows();
                                            SuffleRowsGrid2();
                                            gridBOMProductEntryList.UpdateEdit();
                                            gridBOMProductEntryList.UpdateEdit();
                                        }
                                        else {
                                            jAlert("Please enter new revision number to save.");
                                            return false;
                                        }

                                    }
                                });
                            }
                            else {
                                addNewRowToEditgrid();

                                SuffleRows();
                                SuffleRowsGrid2();
                                gridBOMProductEntryList.UpdateEdit();
                                gridBOMProductEntryList.UpdateEdit();
                            }
                        }
                        else {
                            addNewRowToEditgrid();
                            SuffleRows();
                            SuffleRowsGrid2();
                            gridBOMProductEntryList.UpdateEdit();
                            gridBOMProductEntryList.UpdateEdit();
                            //if (ProjectMandatoryInEntry == "Yes" )
                            //{
                            //    if(ProjectGridLookup.GetSelectedKeyFieldValues() != "")
                            //    {
                            //        SuffleRows();
                            //        SuffleRowsGrid2();
                            //        gridBOMProductEntryList.UpdateEdit();
                            //        gridBOMProductEntryList.UpdateEdit();
                            //    }
                            //    else
                            //    {
                            //        jAlert("Please Select Project.");
                            //        return false;
                            //    }
                            //}
                            //else
                            //{
                            //    SuffleRows();
                            //    SuffleRowsGrid2();
                            //    gridBOMProductEntryList.UpdateEdit();
                            //    gridBOMProductEntryList.UpdateEdit();
                            //}


                        }
                    }
                    else {
                        savemode = "";
                        if (bomno == '') {
                            $('#EBOMNo').show();
                        }
                        else {
                            $('#EBOMNo').hide();
                        }
                        if (BOMDate == '') {
                            $('#EBOMDate_dt').show();
                        }
                        else {
                            $('#EBOMDate_dt').hide();
                        }
                        if (FinishedItem == '') {
                            $('#EbtnFinishedItem').show();
                        }
                        else {
                            $('#EbtnFinishedItem').hide();
                        }
                        if (FinishedQty == '') {
                            $('#EFinishedQty').show();
                        }
                        else {
                            $('#EFinishedQty').hide();
                        }
                        if (FinishedUom == '') {
                            $('#EFinishedQty').show();
                        }
                        else {
                            $('#EFinishedQty').hide();
                        }
                        if (RevisionNo == '') {
                            $('#ERevisionNo').show();
                        }
                        else {
                            $('#ERevisionNo').hide();
                        }
                        if (RevisionDate == '') {
                            $('#ERevisionDate_dt').show();
                        }
                        else {
                            $('#ERevisionDate_dt').hide();
                        }
                        if (Unit == '') {
                            $('#EddlBankBranch').show();
                        }
                        else {
                            $('#EddlBankBranch').hide();
                        }

                        $("html, body").animate({ scrollTop: 0 }, 600);
                        return false;
                    }
                }
           // }
        }
        else {
            $("html, body").animate({ scrollTop: 0 }, 600);
            savemode = "";
            if (bomno == '') {
                $('#EBOMNo').show();
            }
            else {
                $('#EBOMNo').hide();
            }
            if (BOMDate == '') {
                $('#EBOMDate_dt').show();
            }
            else {
                $('#EBOMDate_dt').hide();
            }
            if (FinishedItem == '') {
                $('#EbtnFinishedItem').show();
            }
            else {
                $('#EbtnFinishedItem').hide();
            }
            if (FinishedQty == '') {
                $('#EFinishedQty').show();
            }
            else {
                $('#EFinishedQty').hide();
            }
            if (FinishedUom == '') {
                $('#EFinishedQty').show();
            }
            else {
                $('#EFinishedQty').hide();
            }
            if (RevisionNo == '') {
                $('#ERevisionNo').show();
            }
            else {
                $('#ERevisionNo').hide();
            }
            if (RevisionDate == '') {
                $('#ERevisionDate_dt').show();
            }
            else {
                $('#ERevisionDate_dt').hide();
            }
            if (Unit == '') {
                $('#EddlBankBranch').show();
            }
            else {
                $('#EddlBankBranch').hide();
            }
            jAlert('Cannot Save. You must enter atleast one Product to save this entry.');
            return false;
        }
    }

    function OnResourcesStartCallback(s, e) {

        var strbomno = $('#BOMNo').val();
        var BOMDate = GetServerDateFormat(BOMDate_dt.GetValue());
        //var BOMDate = $('#BOMDate_dt').val();
        var FinishedItem = $('#hdnFinishedItem').val();
        var FinishedQty = $('#FinishedQty').val();
        var FinishedUom = $('#FinishedUom').val();
        var BOMType = $('#slcbomtype option:selected').val();
        var RevisionNo = $('#RevisionNo').val();
        var RevisionDate = GetServerDateFormat(RevisionDate_dt.GetValue());
        //var RevisionDate = $('#RevisionDate_dt').val();
        var Unit = $('#ddlBankBranch option:selected').val();
        var WarehouseID = $('#ddlWarehouse option:selected').val();
        var SchemaID = $('#hdnSchemaId').val();
        var ActualAdditionalCost = $('#txtActualAdditionalCost').val();
        var PartNO = $('#hdnPartNo').val();
        var hdnDetailsID = $('#hdnDetailsID').val();
        if (hdnDetailsID > 0) {
            DetailsID = hdnDetailsID;
        }
        if (hdnDetailsID == "") {

            RevisionDate = GetServerDateFormat(new Date);
        }


        if (e != undefined) {
            e.customArgs["strBOMNo"] = strbomno;
            e.customArgs["BOMDate"] = BOMDate;
            e.customArgs["FinishedItem"] = FinishedItem;
            e.customArgs["FinishedQty"] = FinishedQty;

            e.customArgs["FinishedUom"] = FinishedUom;
            e.customArgs["BOMType"] = BOMType;
            e.customArgs["RevisionNo"] = RevisionNo; //EmployeesCounterTargetList

            e.customArgs["RevisionDate"] = RevisionDate;
            e.customArgs["Unit"] = Unit;
            e.customArgs["WarehouseID"] = WarehouseID;
            e.customArgs["BOM_SCHEMAID"] = SchemaID;
            e.customArgs["ActualAdditionalCost"] = ActualAdditionalCost;

            e.customArgs["ProductionID"] = ProductionID;
            e.customArgs["DetailsID"] = DetailsID;
            e.customArgs["PartNo"] = PartNO;
            e.customArgs["ProjectID"] = ProjectGridLookup.GetSelectedKeyFieldValues();

        }


    }

    function OnStartCallback(s, e) {

        var strbomno = $('#BOMNo').val();
        var BOMDate = GetServerDateFormat(BOMDate_dt.GetValue());
        //var BOMDate = $('#BOMDate_dt').val();
        var FinishedItem = $('#hdnFinishedItem').val();
        var FinishedQty = $('#FinishedQty').val();
        var FinishedUom = $('#FinishedUom').val();
        var BOMType = $('#slcbomtype option:selected').val();
        var RevisionNo = $('#RevisionNo').val();
        var RevisionDate = GetServerDateFormat(RevisionDate_dt.GetValue());
        //var RevisionDate = $('#RevisionDate_dt').val();
        var Unit = $('#ddlBankBranch option:selected').val();
        var WarehouseID = $('#ddlWarehouse option:selected').val();
        var SchemaID = $('#hdnSchemaId').val();
        var ActualAdditionalCost = $('#txtActualAdditionalCost').val();
        var strRemarks = $('#strRemarks').val();
        var hdnDetailsID = $('#hdnDetailsID').val();
        if (hdnDetailsID > 0) {
            DetailsID = hdnDetailsID;
        }

        if (hdnDetailsID == "") {

            RevisionDate = GetServerDateFormat(new Date);
        }
        var MPS_ID = $('#hdnMPS_ID').val();
        var PartNO = $('#hdnPartNo').val();
        if (e != undefined) {
            e.customArgs["strBOMNo"] = strbomno;
            e.customArgs["BOMDate"] = BOMDate;

            e.customArgs["FinishedItem"] = FinishedItem;
            e.customArgs["FinishedQty"] = FinishedQty;

            e.customArgs["FinishedUom"] = FinishedUom;
            e.customArgs["BOMType"] = BOMType;
            e.customArgs["RevisionNo"] = RevisionNo; //EmployeesCounterTargetList

            e.customArgs["RevisionDate"] = RevisionDate;
            e.customArgs["Unit"] = Unit;
            e.customArgs["WarehouseID"] = WarehouseID;
            e.customArgs["BOM_SCHEMAID"] = SchemaID;
            e.customArgs["ActualAdditionalCost"] = ActualAdditionalCost;

            e.customArgs["ProductionID"] = ProductionID;
            e.customArgs["DetailsID"] = DetailsID;

            e.customArgs["strRemarks"] = strRemarks;
            e.customArgs["TotalResourceCost1"] = $('#txtTotalResourceCost').val();
            e.customArgs["PartNo"] = PartNO;
            e.customArgs["ProjectID"] = ProjectGridLookup.GetSelectedKeyFieldValues();
            e.customArgs["MPS_ID"] = MPSGridLookup.GetSelectedKeyFieldValues();;
        }



    }

    function Scheme_ValueChange() {
        var val = $('#ddlSchema option:selected').val();
        var schemetypeValue = val;
        var schemetype = schemetypeValue.toString().split('~')[1];
        var schemelength = schemetypeValue.toString().split('~')[2];
        var branchID = (schemetypeValue.toString().split('~')[3] != null) ? schemetypeValue.toString().split('~')[3] : "";
        var SchemaID = schemetypeValue.toString().split('~')[0];
        $('#hdnSchemaId').val(SchemaID);

        var fromdate = (schemetypeValue.toString().split('~')[5] != null) ? schemetypeValue.toString().split('~')[5] : "";
        var todate = (schemetypeValue.toString().split('~')[6] != null) ? schemetypeValue.toString().split('~')[6] : "";

        var dt = new Date();
        document.getElementById("BOMNo").maxLength = schemelength;
        BOMDate_dt.SetDate(dt);

        if (dt < new Date(fromdate)) {
            BOMDate_dt.SetDate(new Date(fromdate));
        }

        if (dt > new Date(todate)) {
            BOMDate_dt.SetDate(new Date(todate));
        }
        BOMDate_dt.SetMinDate(new Date(fromdate));
        BOMDate_dt.SetMaxDate(new Date(todate));

        if (branchID > 0) {
            $('#ddlBankBranch').val(branchID);
            //ProjectLookupValChange();
            ProjectGridLookup.SetValue("");
            $('#ddlHierarchy').val("");
            ProjectGridLookup.gridView.UnselectRows(1);
            ProjectGridLookup.GetGridView().Refresh();

            MPSGridLookup.gridView.UnselectRows(1);
            MPSGridLookup.GetGridView().Refresh();
            MPSGridLookup.GetGridView().Refresh();
            //Rev work start 29.07.2022 mantise no:0025098: Copy feature is required in Bill of Material Module
            if ($('#hdnIsView').val() == 2) {
                $('#MPSDate').val('');
            }
            //Rev work close 29.07.2022 mantise no:0025098: Copy feature is required in Bill of Material Module
        }

        if (schemetype == '0') {
            $('#BOMNo').removeAttr("disabled");
            $('#BOMNo').val('');

            $('#BOMNo').focus();
        }
        else if (schemetype == '1') {
            $('#BOMNo').attr("disabled", "disabled");
            $('#BOMNo').val('Auto');

            //$('#BOMNo').focus();

        }
        else if (schemetype == '2') {
            $('#BOMNo').attr("disabled", "disabled");
            $('#BOMNo').val('Datewise');

            //$('#BOMNo').focus();

        }
        else if (schemetype == 'n') {
            $('#BOMNo').attr("disabled", "disabled");
            $('#BOMNo').val('');

            //$('#BOMNo').focus();
        }
        else {
            $('#BOMNo').attr("disabled", "disabled");
            $('#BOMNo').val('');

            //$('#BOMNo').focus();

        }



    }

    function SuffleRows() {
        for (var i = 0; i < 1000; i++) {
            if (gridBOMProductEntryList.GetRow(i)) {
                if (gridBOMProductEntryList.GetRow(i).style.display != "none") {
                    gridBOMProductEntryList.batchEditApi.StartEdit(i, 20);
                    gridBOMProductEntryList.GetEditor("UpdateEdit").SetText(i);
                }
            }
        }

        for (i = -1; i > -1000; i--) {
            if (gridBOMProductEntryList.GetRow(i)) {
                if (gridBOMProductEntryList.GetRow(i).style.display != "none") {
                    gridBOMProductEntryList.batchEditApi.StartEdit(i, 20);
                    gridBOMProductEntryList.GetEditor("UpdateEdit").SetText(i);
                }
            }
        }
    }

    function SuffleRowsGrid2() {
        for (var i = 0; i < 1000; i++) {
            if (gridBOMResourcesList.GetRow(i)) {
                if (gridBOMResourcesList.GetRow(i).style.display != "none") {
                    gridBOMResourcesList.batchEditApi.StartEdit(i, 12);
                    gridBOMResourcesList.GetEditor("UpdateEdit").SetText(i);
                }
            }
        }

        for (i = -1; i > -1000; i--) {
            if (gridBOMResourcesList.GetRow(i)) {
                if (gridBOMResourcesList.GetRow(i).style.display != "none") {
                    gridBOMResourcesList.batchEditApi.StartEdit(i, 12);
                    gridBOMResourcesList.GetEditor("UpdateEdit").SetText(i);
                }
            }
        }
    }

    function parseDate(str) {
        var mdy = str.split('-');
        return new Date(mdy[2], mdy[1] - 1, mdy[0]);
    }

    function GetServerDateFormat(today) {
        if (today != "" && today != null) {
            var dd = today.getDate();
            var mm = today.getMonth() + 1;
            var yyyy = today.getFullYear();

            if (dd < 10) {
                dd = '0' + dd;
            }
            if (mm < 10) {
                mm = '0' + mm;
            }
            today = yyyy + '-' + mm + '-' + dd;
        }
        else {
            today = "";
        }

        return today;
    }

    function ChkDataDigitCount(e) {

        var data = $(e).val();
        $(e).val(parseFloat(data).toFixed(4));
        if (data == '' || data == null) {
            $(e).val(parseFloat(0).toFixed(4));
        }
    }

    function ChkMoneyDigitCount(e) {
        var data = $(e).val();
        $(e).val(parseFloat(data).toFixed(2));


        var txtActualAdditionalCost = $('#txtActualAdditionalCost').val();
        if (txtActualAdditionalCost == "NaN" || txtActualAdditionalCost == "") {
            txtActualAdditionalCost = "0.00";
        }
        var txtTotalResourceCost = $('#txtTotalResourceCost').val();
        if (txtTotalResourceCost == "" || txtTotalResourceCost == "NaN") {
            txtTotalResourceCost = "0.00";
        }
        var txtActualComponentCost = $('#txtActualComponentCost').val();
        if (txtActualComponentCost == "NaN" || txtActualComponentCost == "") {
            txtActualComponentCost = "0.00";
        }
        var TotalActualProductCost = parseFloat(parseFloat(txtActualAdditionalCost) + parseFloat(txtTotalResourceCost) + parseFloat(txtActualComponentCost)).toFixed(2);
        $('#txtActualProductCost').val(TotalActualProductCost);
    }

    $(document).ready(function () {
        var hdnBOMTYPE = $('#hdnBOMTYPE').val();
        var hdnDetailsID = $('#hdnDetailsID').val();
        //Rev work start 29.07.2022 mantise no:0025098: Copy feature is required in Bill of Material Module
        var hdnIsView = $('#hdnIsView').val();
        //if (hdnBOMTYPE != '' && hdnDetailsID > 0) {
        if (hdnBOMTYPE != '' && hdnDetailsID > 0 && hdnIsView!=2) {
            //Rev work close 29.07.2022 mantise no:0025098: Copy feature is required in Bill of Material Module
            MPSGridLookup.GetGridView().Refresh();
            MPSGridLookup.GetGridView().Refresh();
            //$('#slcbomtype option:selected').val(hdnBOMTYPE);
            $('#slcbomtype').val(hdnBOMTYPE);
            $('#BOMNo').attr("disabled", "disabled");
            $('#ddlSchema').attr("disabled", "disabled");
            $('#slcbomtype').attr("disabled", "disabled");

            //$('#BOMDate_dt').attr("disabled", "disabled");
            //btnFinishedItem.SetButtonVisible(0, '');
            //$('#FinishedQty').attr("disabled", "disabled");
            $('#ddlBankBranch').attr("disabled", "disabled");
            //$('#ddlWarehouse').attr("disabled", "disabled");
            BOMDate_dt.SetEnabled(false);
            //RevisionDate_dt.SetEnabled(false);
            var BOMResourcesTotal = $('#BOMResourcesTotalAm').val();
            if (BOMResourcesTotal != "" && BOMResourcesTotal != undefined) {
                $('#txtGridResourcesTotalAmount').val(parseFloat(BOMResourcesTotal).toFixed(2));
                $('#txtTotalResourceCost').val(parseFloat(BOMResourcesTotal).toFixed(2));
            }

            var BOMEntryProductsTotal = $('#hdnBOMEntryProductsTotalAm').val();
            if (BOMEntryProductsTotal != "" && BOMEntryProductsTotal != undefined) {
                $('#txtGridProductEntryTotalAmount').val(parseFloat(BOMEntryProductsTotal).toFixed(2));
                $('#txtActualComponentCost').val(parseFloat(BOMEntryProductsTotal).toFixed(2));

            }
            //$('#ddlSchema').val($('#hdnBOM_SCHEMAID').val());
            var hdnBOMResourcesTotalAm = $('#hdnBOMResourcesTotalAm').val();
            if (hdnBOMResourcesTotalAm != "" && hdnBOMResourcesTotalAm != undefined) {
                $('#txtGridResourcesTotalAmount').val(parseFloat(hdnBOMResourcesTotalAm).toFixed(2));
                $('#txtTotalResourceCost').val(parseFloat(hdnBOMResourcesTotalAm).toFixed(2));
            }



            var txtActualAdditionalCost = $('#txtActualAdditionalCost').val();
            if (txtActualAdditionalCost == "NaN" || txtActualAdditionalCost == "") {
                txtActualAdditionalCost = "0.00";
            }
            var txtTotalResourceCost = $('#txtTotalResourceCost').val();
            if (txtTotalResourceCost == "" || txtTotalResourceCost == "NaN") {
                txtTotalResourceCost = "0.00";
            }
            var txtActualComponentCost = $('#txtActualComponentCost').val();
            if (txtActualComponentCost == "NaN" || txtActualComponentCost == "") {
                txtActualComponentCost = "0.00";
            }
            var TotalActualProductCost = parseFloat(parseFloat(txtActualAdditionalCost) + parseFloat(txtTotalResourceCost) + parseFloat(txtActualComponentCost)).toFixed(2);
            $('#txtActualProductCost').val(TotalActualProductCost);


            $('#btnSaveandNew').hide();

            setTimeout(function () { var noofrow = gridBOMResourcesList.GetVisibleRowsOnPage(); if (noofrow > 1) { $('#showResources').click(); } }, 800);

        }
            //Rev work start 29.07.2022   mantise no:0025098: Copy feature is required in Bill of Material Module
        else if (hdnBOMTYPE != '' && hdnDetailsID > 0 && hdnIsView==2) {
            MPSGridLookup.GetGridView().Refresh();
            MPSGridLookup.GetGridView().Refresh();
            $('#slcbomtype').val(hdnBOMTYPE);
            $('#BOMNo').attr("disabled", "disabled");
            $("#ddlSchema").removeAttr("disabled");
            $("#slcbomtype").removeAttr("disabled");

            $('#FinishedQty').removeAttr("disabled");
            $('#ddlWarehouse').removeAttr("disabled");

            $('#ddlBankBranch').attr("disabled", "disabled");
            BOMDate_dt.SetEnabled(true);

            //RevisionDate_dt.SetEnabled(true);

            var BOMResourcesTotal = $('#BOMResourcesTotalAm').val();
            if (BOMResourcesTotal != "" && BOMResourcesTotal != undefined) {
                $('#txtGridResourcesTotalAmount').val(parseFloat(BOMResourcesTotal).toFixed(2));
                $('#txtTotalResourceCost').val(parseFloat(BOMResourcesTotal).toFixed(2));
            }

            var BOMEntryProductsTotal = $('#hdnBOMEntryProductsTotalAm').val();
            if (BOMEntryProductsTotal != "" && BOMEntryProductsTotal != undefined) {
                $('#txtGridProductEntryTotalAmount').val(parseFloat(BOMEntryProductsTotal).toFixed(2));
                $('#txtActualComponentCost').val(parseFloat(BOMEntryProductsTotal).toFixed(2));

            }
            var hdnBOMResourcesTotalAm = $('#hdnBOMResourcesTotalAm').val();
            if (hdnBOMResourcesTotalAm != "" && hdnBOMResourcesTotalAm != undefined) {
                $('#txtGridResourcesTotalAmount').val(parseFloat(hdnBOMResourcesTotalAm).toFixed(2));
                $('#txtTotalResourceCost').val(parseFloat(hdnBOMResourcesTotalAm).toFixed(2));
            }



            var txtActualAdditionalCost = $('#txtActualAdditionalCost').val();
            if (txtActualAdditionalCost == "NaN" || txtActualAdditionalCost == "") {
                txtActualAdditionalCost = "0.00";
            }
            var txtTotalResourceCost = $('#txtTotalResourceCost').val();
            if (txtTotalResourceCost == "" || txtTotalResourceCost == "NaN") {
                txtTotalResourceCost = "0.00";
            }
            var txtActualComponentCost = $('#txtActualComponentCost').val();
            if (txtActualComponentCost == "NaN" || txtActualComponentCost == "") {
                txtActualComponentCost = "0.00";
            }
            var TotalActualProductCost = parseFloat(parseFloat(txtActualAdditionalCost) + parseFloat(txtTotalResourceCost) + parseFloat(txtActualComponentCost)).toFixed(2);
            $('#txtActualProductCost').val(TotalActualProductCost);


            $('#btnSaveandNew').show();
            $('#hdnBOM_SCHEMAID').val('');

            setTimeout(function () { var noofrow = gridBOMResourcesList.GetVisibleRowsOnPage(); if (noofrow > 1) { $('#showResources').click(); } }, 800);

        }
            //Rev work close 29.07.2022 mantise no:0025098: Copy feature is required in Bill of Material Module
        else {
            //$("#BOMNo").removeAttr("disabled");
            $("#ddlSchema").removeAttr("disabled");
            $("#slcbomtype").removeAttr("disabled");
            $('#FinishedQty').removeAttr("disabled");
            //$('#ddlBankBranch').removeAttr("disabled");
            $('#ddlWarehouse').removeAttr("disabled");
            BOMDate_dt.SetEnabled(true);
            RevisionDate_dt.SetEnabled(true);
            $('#btnSaveandNew').show();
            RevisionDate_dt.SetDate(null);
            $('#hdnBOM_SCHEMAID').val('');
        }


        $('#GridWarehouselistModel').on('shown.bs.modal', function () {
            $('#ddlWarehouselist').focus();
        })

    });


    function datevalidateTo() {

        if (BOMDate_dt.GetDate()) {
            if (RevisionDate_dt.GetDate() <= BOMDate_dt.GetDate()) {
                if ($('#hdnDetailsID').val() != "") {
                    RevisionDate_dt.SetValue(BOMDate_dt.GetDate());
                    RevisionDate_dt.SetMinDate(BOMDate_dt.GetDate());
                }
            }
        }
    }


    function validateFloatKeyPress(el, evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode;
        var number = el.value.split('.');
        if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57)) {
            return false;
        }
        //just one dot (thanks ddlab)
        if (number.length > 1 && charCode == 46) {
            return false;
        }
        //get the carat position
        var caratPos = getSelectionStart(el);
        var dotPos = el.value.indexOf(".");
        if (caratPos > dotPos && dotPos > -1 && (number[1].length > 1)) {
            return false;
        }
        return true;
    }


    function getSelectionStart(o) {
        if (o.createTextRange) {
            var r = document.selection.createRange().duplicate()
            r.moveEnd('character', o.value.length)
            if (r.text == '') return o.value.length
            return o.value.lastIndexOf(r.text)
        } else return o.selectionStart
    }

    $(function () {
        $('#refreshgrid2').hide();
        $(".decimalCheck").on("keypress keyup blur", function (event) {
            //this.value = this.value.replace(/[^0-9\.]/g,'');
            $(this).val($(this).val().replace(/[^0-9\.]/g, ''));
            if ((event.which != 46 || $(this).val().indexOf('.') != -1) && (event.which < 48 || event.which > 57)) {
                event.preventDefault();
            }
        });

        $('#showResources').click(function () {
            $('#refreshgrid2').show();
            gridBOMResourcesList.batchEditApi.StartEdit(globalrowindex2, 2);

            $(this).hide();
        });

        $('#closeResource').click(function () {
            jConfirm('Are you sure to close? Clicking on "Yes" will clear the data from grid.', 'Alert!', function (r) {
                if (r) {
                    $('#refreshgrid2').hide();
                    $('#showResources').show();
                    for (var i = 500; i > -500; i--) {
                        if (gridBOMResourcesList.GetRow(i)) {
                            gridBOMResourcesList.DeleteRow(i);
                        }
                    }
                    AddNewRowGridResources();
                }
            });
        });

        var hdnDetailsID = $('#hdnDetailsID').val();
        if (hdnDetailsID == "") {
            $('#redREV').hide();
            $('#redREVDate').hide();
            $('#RevisionNo').attr("disabled", "disabled");
            RevisionDate_dt.SetEnabled(false);
        }
    });


    //document.onkeydown = function (e) {

    //    if (event.keyCode == 88 && event.altKey == true) { //  && myModal.GetVisible() == true
    //        BOMEntrySave('Exit');
    //    }
    //    if (event.keyCode == 83 && event.altKey == true) { //  && myModal.GetVisible() == true
    //        BOMEntrySave('New');
    //    }
    //}

    $(document).ready(function () {

        $("body").bind("keydown", function (event) {
            if (event.keyCode == 88 && event.altKey == true) {
                BOMEntrySave('Exit');
            }
            if (event.keyCode == 83 && event.altKey == true) {
                BOMEntrySave('New');
            }
        });


        var hdnDetailsID = $('#hdnDetailsID').val();
        if (hdnDetailsID == "") {
            $('#FinishedQty').val(parseFloat(0).toFixed(4));
            setTimeout(function () { RevisionDate_dt.SetDate(null); $('#slcbomtype').focus(); }, 900);


            $("#slcbomtype").focusout(function () {
                $('#ddlSchema').focus();
            })
        }
        $('#slideResource').click(function () {
            //$('#slideDiv').slideUp();
            if (!$('#slideDiv').hasClass('out')) {

                $('#slideDiv').addClass('out');
                $('#slideDiv').slideUp();
                $('#slideResource .fa-chevron-up').hide();
                $('#slideResource .fa-chevron-down').show();
            } else {

                $('#slideDiv').removeClass('out')
                $('#slideDiv').addClass('in');
                $('#slideDiv').slideDown();
                $('#slideResource .fa-chevron-up').show();
                $('#slideResource .fa-chevron-down').hide();
            }
        })

        $("#ddlWarehouse").focusout(function () {
            gridBOMProductEntryList.batchEditApi.EndEdit();
            gridBOMProductEntryList.batchEditApi.StartEdit(globalrowindex, 2);
        });
    });

    function SetFocusQty() {
        $('#FinishedQty').select();
        $('#FinishedQty').focus();
    }
    function SetFocusItemRevNo() {
        $('#ItemRevNo').focus();
    }
    function gridRowclick(s, e) {
        $('#gridAdvanceAdj').find('tr').removeClass('rowActive');
        $('.floatedBtnArea').removeClass('insideGrid');
        //$('.floatedBtnArea a .ico').css({ 'opacity': '0' });
        $(s.GetRow(e.visibleIndex)).find('.floatedBtnArea').addClass('insideGrid');
        $(s.GetRow(e.visibleIndex)).addClass('rowActive');
        setTimeout(function () {
            //alert('delay');
            var lists = $(s.GetRow(e.visibleIndex)).find('.floatedBtnArea a');
            //$(s.GetRow(e.visibleIndex)).find('.floatedBtnArea a .ico').css({'opacity': '1'});
            //$(s.GetRow(e.visibleIndex)).find('.floatedBtnArea a').each(function (e) {
            //    setTimeout(function () {
            //        $(this).fadeIn();
            //    }, 100);
            //});
            $.each(lists, function (index, value) {
                //console.log(index);
                //console.log(value);
                setTimeout(function () {
                    $(value).css({ 'opacity': '1' });
                }, 100);
            });
        }, 200);
    }

</script>


<script>
    $(document).ready(function () {
        $('[data-toggle="tooltip"]').tooltip();
    });

</script>
@Html.Hidden("hdnProductID")

<input type="hidden" value="@Url.Action("BOMEntryList", "BOMEntry")" id="hdnBOMListPage" />
<input type="hidden" value="@Model.DetailsID" id="hdnDetailsID" />

<input type="hidden" value="@Model.BOMType" id="hdnBOMTYPE" />
<input type="hidden" value="@Model.WarehouseID" id="hdnProductWarehouseID" />
<input type="hidden" value="@Model.RevisionNo" id="hdnRevisionNo" />

<input type="hidden" value="@Model.BOM_SCHEMAID" id="hdnBOM_SCHEMAID" />

<input type="hidden" value="@ViewBag.IsView" id="hdnIsView" />

<input type="hidden" value="@ViewBag.AutoPrint" id="hdnIsAutoPrint" />
<input type="hidden" value="@ViewBag.MPS_ID" id="hdnMPS_ID" />

<input type="hidden" id="hdnBranchID" />
@*rev Pratik*@
<input type="hidden" id="hdnProDetString" />
<input type="hidden" id="hddnuomFactor">
<input type="hidden" id="hdProductID">
<input type="hidden" id="hdnPageStatus">
<input type="hidden" id="hdnMultiUOMSR">
@*End of rev Pratik*@

<input type="hidden" value="@ViewBag.IsBOMRateRequired" id="hdnIsBOMRateRequired" />

<div class="panel-heading clearfix">
    <div class="panel-title clearfix pull-left" id="myDiv">
        <h3 class="pull-left">
            <label>Bill of Materials (BOM)</label>
        </h3>

    </div>

    <div id="ApprovalCross" class="crossBtn"><a href="@Url.Action("BOMEntryList", "BOMEntry")"><i class="fa fa-times"></i></a></div>
</div>

<input type="hidden" value="@Model.FinishedItem" id="hdnFinishedItem" />
<input type="hidden" value="@Model.PartNo" id="hdnPartNo" />
<input type="hidden" value="0" id="hdnSchemaId" />

<div class="">
    <div class="boxBorder">
        <div class="styledBox">
            <div class="row">
                <div class="col-sm-2">
                    <label>Select BOM Type <span style="color:red">*</span></label>
                    <select id="slcbomtype" class="form-control" onchange="PopulateNumberingSchemeData();">
                        <option value="Production">Production</option>
                        <option value="Sales">Sales</option>
                        <option value="Assembly">Assembly</option>
                    </select>

                </div>
                <div class="col-md-2">
                    <label>Numbering Scheme <span style="color:red">*</span></label>
                    <div class="relative">
                        <select id="ddlSchema" class="form-control" onchange="Scheme_ValueChange()"></select>
                        <span id="EddlSchema" class="customerno pullleftClass fa fa-exclamation-circle iconRed " style="color: red; position: absolute; display: none" title="Mandatory"></span>
                    </div>
                </div>
                <div class=" col-sm-2">
                    <label>BOM No. <span style="color:red">*</span></label>
                    <div class="relative">
                        @Html.TextBoxFor(m => m.BOMNo, new { @class = "form-control", @disabled = "disabled" })
                        <span id="EBOMNo" class="customerno pullleftClass fa fa-exclamation-circle iconRed " style="color: red; position: absolute; display: none" title="Mandatory"></span>
                    </div>

                </div>
                <div class=" col-sm-2">
                    <label>BOM Date <span style="color:red">*</span></label>
                    <div class="relative">
                        @Html.DevExpress().DateEdit(
                                     settings =>
                                     {
                                         settings.Name = "BOMDate_dt";
                                         settings.Properties.DisplayFormatString = "dd-MM-yyyy";
                                         settings.Properties.EditFormatString = "dd-MM-yyyy";
                                         settings.Width = Unit.Percentage(100);
                                         settings.Properties.ClientSideEvents.DateChanged = "datevalidateTo";
                                         settings.Date = Convert.ToDateTime(@Model.BOMDate);
                                         settings.Properties.UseMaskBehavior = true;

                                     }
                            ).GetHtml()
                        <span id="EBOMDate_dt" class="customerno pullleftClass fa fa-exclamation-circle iconRed " style="color: red; position: absolute; display: none" title="Mandatory"></span>
                    </div>
                </div>
                <div class=" col-sm-2">
                    <label>Revision No. <span style="color:red" id="redREV">*</span></label>
                    <div class="relative">
                        @Html.TextBoxFor(m => m.RevisionNo, new { @class = "form-control" })
                        <span id="ERevisionNo" class="customerno pullleftClass fa fa-exclamation-circle iconRed " style="color: red; position: absolute; display: none" title="Mandatory"></span>
                    </div>
                </div>
                <div class=" col-sm-2">
                    <label>Revision Date <span style="color:red" id="redREVDate">*</span></label>
                    <div class="relative">
                        @Html.DevExpress().DateEdit(
                              settings =>
                              {
                                  settings.Name = "RevisionDate_dt";
                                  settings.Properties.DisplayFormatString = "dd-MM-yyyy";
                                  settings.Properties.EditFormatString = "dd-MM-yyyy";
                                  settings.Width = Unit.Percentage(100);
                                  settings.Properties.ClientSideEvents.DateChanged = "datevalidateTo";
                                  settings.Date = Convert.ToDateTime(@Model.RevisionDate);
                                  settings.Properties.MinDate = Convert.ToDateTime(@Model.BOMDate);
                                  settings.Properties.UseMaskBehavior = true;


                              }
                     ).GetHtml()
                        <span id="ERevisionDate_dt" class="customerno pullleftClass fa fa-exclamation-circle iconRed " style="color: red; position: absolute; display: none" title="Mandatory"></span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class=" col-sm-2">
                    <label class="mtop10">Select Finished Item <span style="color:red">*</span></label>
                    <div class="relative">
                        @Html.DevExpress().ButtonEdit(
                         settings =>
                         {
                             settings.Name = "btnFinishedItem";
                             settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                             settings.Text = Model.FinishedItemName;
                             settings.ReadOnly = true;
                             settings.Properties.Buttons.Add("...");
                             settings.Properties.ClientSideEvents.ButtonClick = "function(s,e){btnProductList_Click(s,e);}";
                             settings.Properties.ClientSideEvents.KeyDown = "function(s,e){btnPayStructure_KeyDown(s,e);}";

                         }).GetHtml()
                        <span id="EbtnFinishedItem" class="customerno pullleftClass fa fa-exclamation-circle iconRed " style="color: red; position: absolute; display: none" title="Mandatory"></span>
                    </div>

                    @*@Html.TextBoxFor(m => m.FinishedItem, new { @class = "form-control" })*@
                </div>
                <div class="col-sm-2">
                    <label class="mtop10">Finished Qty <span style="color:red">*</span></label>

                    <div class="relative">

                        <table style="width:100%" class="finishedQttable">
                            <tr>
                                <td>@Html.TextBoxFor(m => m.FinishedQty, new { @class = "form-control decimalCheck", @onchange = "ChkDataDigitCount(this)", @PlaceHolder = "0.0000" })</td>
                                <td>@Html.TextBoxFor(m => m.FinishedUom, new { @class = "form-control", @disabled = "disabled" })</td>
                            </tr>
                        </table>
                        <span id="EFinishedQty" class="customerno pullleftClass fa fa-exclamation-circle iconRed " style="color: red; position: absolute; display: none" title="Mandatory"></span>
                    </div>
                </div>
                <div class=" col-sm-2">
                    <label class="mtop10">Unit <span style="color:red">*</span></label>
                    <div class="relative">
                        @Html.DropDownListFor(x => x.Unit, new SelectList(Model.UnitList, "BranchID", "BankBranchName"), new { @id = "ddlBankBranch", @class = "form-control", @onchange = "PopulateWareHouseData();", @disabled = "disabled" })
                        <span id="EddlBankBranch" class="customerno pullleftClass fa fa-exclamation-circle iconRed " style="color: red; position: absolute; display: none" title="Mandatory"></span>
                    </div>
                    @*@Html.TextBoxFor(m => m.Unit, new { @class = "form-control" })*@
                </div>
                <div class=" col-sm-2">
                    <label class="mtop10">Select Warehouse <span style="color:red">*</span></label>
                    <div class="relative">
                        <select id="ddlWarehouse" class="form-control"></select>
                        <span id="EddlWarehouse" class="customerno pullleftClass fa fa-exclamation-circle iconRed " style="color: red; position: absolute; display: none" title="Mandatory"></span>
                    </div>
                    @*@Html.TextBoxFor(m => m.Warehouse, new { @class = "form-control" })*@
                </div>
                <div class=" col-sm-4">
                    <label class="mtop10">Remarks </label>
                    <div class="relative">
                        @Html.TextBoxFor(m => m.strRemarks, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class=" col-sm-3">
                    <label class="mtop10">Description</label>
                    @Html.TextBoxFor(m => m.Description, new { @class = "form-control", @disabled = "disabled" })
                </div>

                <div class=" col-sm-2">
                    <label class="mtop10">Part No:</label>
                    <div class="relative">
                        @Html.TextBoxFor(m => m.PartNoName, new { @class = "form-control", @disabled = "disabled" })
                        @*@Html.DevExpress().ButtonEdit(
                            settings =>
                            {
                                settings.Name = "btnPartNo";
                                settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                settings.Text = Model.PartNoName;
                                settings.ReadOnly = true;
                                settings.Properties.Buttons.Add("...");
                                settings.Properties.ClientSideEvents.ButtonClick = "function(s,e){btnPartNoList_Click(s,e);}";
                                settings.Properties.ClientSideEvents.KeyDown = "function(s,e){btnPartNo_KeyDown(s,e);}";
                            }).GetHtml()*@
                    </div>


                </div>
                <div class=" col-sm-2">
                    <label class="mtop10">Drawing No:</label>
                    @Html.TextBoxFor(m => m.DesignNo, new { @class = "form-control", @disabled = "disabled" })
                </div>
                <div class=" col-sm-2">
                    <label class="mtop10">Drawing Rev. No:</label>
                    @Html.TextBoxFor(m => m.ItemRevNo, new { @class = "form-control", @disabled = "disabled" })
                </div>
            </div>
            <div class="row">
                <div class=" col-sm-2" id="divProj">
                    <label class="mtop10">Project Code </label>
                    <div class="relative">
                        @Html.Action("GetProjectCode", "BOMEntry", new { Project_ID = ViewBag.ProjectID, Branchs = ViewBag.Unit, Hierarchy = @ViewBag.Hierarchy, BOM_ID = @Model.DetailsID })


                    </div>
                </div>

                <div class="col-sm-4" id="divHierarchy">
                    <label class="mtop10">Hierarchy</label>
                    <div class="relative">
                        @Html.DropDownListFor(x => x.Hierarchy, new SelectList(Model.Hierarchy_List, "Hierarchy_id", "Hierarchy_Name"), new { @id = "ddlHierarchy", @class = "form-control", @disabled = "disabled" })
                    </div>
                </div>
                <div class=" col-sm-2">
                    <label class="mtop10">MPS No. </label>
                    <div class="relative">
                        @Html.Action("GetMPSNO", "BOMEntry", new { @class = "form-control", MPS_ID = ViewBag.MPS_ID, Branchs = ViewBag.Unit })

                    </div>
                </div>
                <div class=" col-sm-2">
                    <label class="mtop10">MPS Date </label>
                    <div class="relative">
                        @Html.TextBoxFor(m => m.MPSDate, new { @class = "form-control", @disabled = "disabled" })
                    </div>
                </div>

            </div>
            <br />

            <div class="row">
                <div class="col-md-12">

                    <div id="refreshgrid" class="relative">
                        @{
                            Html.RenderAction("GetBOMProductEntryList", "BOMEntry");
                        }
                    </div>
                    @*@{

                            Html.Partial("~/Views/BOM/BOMEntry/_BOMProductEntryGrid.cshtml");
                            //Html.RenderPartial("_BOMProductEntryGrid");
                        }*@
                    <div class="clearfix footrGrider">

                        <div class="ttAMt pull-left">
                            <table>
                                <tr>
                                    <td><label>Total Amount</label></td>
                                    <td><input type="text" class="form-control text-right" id="txtGridProductEntryTotalAmount" style="width: 132px;" placeholder="0.00" disabled /></td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>


            </div>

            @* Rev 1.1 New grid like POS module *@
            <div class="row relative" id="refreshgrid2">
                <div class="col-md-12 relative">
                    <h4>
                        Resources <i class="fa fa-reply backwords"></i>
                        <span id="closeResource" class="pull-right" data-toggle="tooltip" title="Remove Resources"><i class="fa fa-close"></i></span>
                        <span id="slideResource" class="pull-right" data-toggle="tooltip" title="Expand/Collapse Resources"><i class="fa fa-chevron-up"></i><i class="fa fa-chevron-down"></i></span>
                    </h4>

                </div>

                <div class="col-md-12 mTop10">
                    <div id="slideDiv">
                        <div class="relative">
                            @{
                                Html.RenderAction("GetBOMResources", "BOMEntry");
                            }
                        </div>
                        <div class="clearfix footrGrider">

                            <div class="ttAMt tw">
                                <table>
                                    <tr>
                                        <td><label>Total Amount</label></td>
                                        <td><input type="text" class="form-control text-right" id="txtGridResourcesTotalAmount" style=" width: 132px;" placeholder="0.00" disabled /></td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="">
                <div class="clearfix">
                    <button type="button" class="inline-block addResourceBtn mRight5" id="showResources"><div class="addEdcircleBtn"><i class="fa fa-plus"></i></div><span>Add Resources</span></button>
                    @if (Convert.ToInt16(ViewBag.IsView) == 0)
                    {
                        <button type="button" class="inline-block addResourceBtn themeColor mRight5" id="btnSaveandNew" onclick="BOMEntrySave('New');"><div class="addEdcircleBtn" id=""><i class="fa fa-floppy-o"></i></div><span><u>S</u>ave and New</span></button>
                        <button type="button" class="inline-block addResourceBtn themeColor " onclick="BOMEntrySave('Exit');"><div class="addEdcircleBtn" id=""><i class="fa fa-reply"></i></div><span>Save and E<u>x</u>it</span></button>
                    }
                    @*Rev work start 29.07.2022 mantise no:0025098: Copy feature is required in Bill of Material Module*@
                    @if (Convert.ToInt16(ViewBag.IsView) == 2)
                    {
                        <button type="button" class="inline-block addResourceBtn themeColor mRight5" id="btnSaveandNew" onclick="BOMEntrySave('New');"><div class="addEdcircleBtn" id=""><i class="fa fa-floppy-o"></i></div><span><u>S</u>ave and New</span></button>
                        <button type="button" class="inline-block addResourceBtn themeColor " onclick="BOMEntrySave('Exit');"><div class="addEdcircleBtn" id=""><i class="fa fa-reply"></i></div><span>Save and E<u>x</u>it</span></button>
                    }
                    @*Rev work close 29.07.2022 mantise no:0025098: Copy feature is required in Bill of Material Module*@
                    <div class="inline-block pull-right">

                        <div class="inline-block mTop5">
                            <label class="stLbl ">Enter Additional Cost</label>
                            <div>
                                <input type="text" value="@Model.ActualAdditionalCost" placeholder="0.00" id="txtActualAdditionalCost" maxlength="12" class="form-control decimalCheck" onchange="ChkMoneyDigitCount(this);" onkeypress="return validateFloatKeyPress(this,event);" />
                            </div>
                        </div>
                        <div class="inline-block mTop5">
                            <label class="stLbl ">Resource Cost</label>
                            <div class="disab"><input type="text" value="@Model.TotalResourceCost1" placeholder="0.00" class="form-control" id="txtTotalResourceCost" disabled /></div>
                        </div>
                        <div class="inline-block mTop5">
                            <label class="stLbl ">Actual Component Cost</label>
                            <div class="disab"><input type="text" value="@Model.ActualComponentCost" placeholder="0.00" class="form-control" id="txtActualComponentCost" disabled /></div>
                        </div>
                        <div class="inline-block mTop5">
                            <label class="stLbl ">Production Order Qty</label>
                            <div class="disab">
                                <input type="text" value="@Model.ProductionOrderQty" placeholder="0.00" class="form-control" id="txtProductionOrderQty" disabled />
                            </div>
                        </div>

                        <div class="inline-block mTop5">
                            <label class="stLbl ">FG Receipt Qty</label>
                            <div class="disab">
                                <input type="text" value="@Model.FGReceiptQty" placeholder="0.00" class="form-control" id="txtFGReceiptQty" disabled />
                            </div>
                        </div>
                        <div class="inline-block mTop5">
                            <label class="stLbl ">Actual Product Cost</label>
                            <div class="disab">
                                <input type="text" value="@Model.ActualProductCost" placeholder="0.00" class="form-control" id="txtActualProductCost" disabled />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="">
                </div>
            </div>

        </div>
    </div>
    <!-- Product List -->
    <div class="modal fade" id="ProductlistModel" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" onclick="SetFocusQty();">&times;</button>
                    <h4 class="modal-title">Select Product</h4>
                </div>
                <div class="modal-body">
                    <input type="text" onkeydown="ProductListkeydown(event)" id="txtProductName" autofocus width="100%" placeholder="Search By Product Name or Short Name" />
                    <div id="ProductTable">
                        <table border='1' width="100%" class="dynamicPopupTbl">
                            <tbody>
                                <tr class="HeaderStyle">
                                    <th class="hide">id</th>
                                    <th>Product Code</th>
                                    <th>Product Name</th>
                                    <th>Inventory</th>
                                    <th>HSN/SAC</th>
                                    <th>Brand</th>
                                    <th>Class</th>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal" onclick="SetFocusQty();">Close</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Product List-->
    <!-- Grid Product List -->
    <div class="modal fade" id="GridProductlistModel" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Select Product</h4>
                </div>
                <div class="modal-body">
                    <input type="text" onkeydown="GridProductListkeydown(event)" id="txtGridProductName" autofocus width="100%" placeholder="Search By Product Name or Short Name" />
                    <div id="GridProductTable">
                        <table border='1' width="100%" class="dynamicPopupTbl">
                            <tr class="HeaderStyle">
                                <th class="hide">id</th>
                                <th>Product Code</th>
                                <th>Product Name</th>
                                <th>Inventory</th>
                                <th>HSN/SAC</th>
                                <th>Brand</th>
                                <th>Class</th>
                            </tr>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal" onclick="SetFocusDesc()">Close</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Grid Product List-->
    <!-- Grid Warehouse List -->
    <div class="modal fade pmsModal w30" id="GridWarehouselistModel" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" onclick="SetWarehouseAfterProduct()">&times;</button>
                    <h4 class="modal-title">Select Warehouse</h4>
                </div>
                <div class="modal-body">
                    <div id="slcWarehouse">
                        <select id="ddlWarehouselist" class="form-control"></select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success btn-radius" id="setWarehousegrid" onclick="SetWarehouseInGrid()">Ok</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Grid Product List-->
    <!-- Grid BOM List -->
    <div class="modal fade" id="GridBOMlistModel" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Select BOM</h4>
                </div>
                <div class="modal-body">
                    <input type="text" onkeydown="GridBomListkeydown(event)" id="txtBOMName" autofocus width="100%" placeholder="Search By BOM Name" />
                    <div id="GridBOMTable">
                        <table border='1' width="100%" class="dynamicPopupTbl">
                            <tr class="HeaderStyle">
                                <th class="hide">id</th>
                                <th>BOM No.</th>
                                <th>BOM Date</th>
                                <th>Revision No.</th>
                                <th>Revision Date</th>
                            </tr>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success btn-radius" data-dismiss="modal" onclick="SetBOMFocusGrid()">Close</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Grid BOM List-->
    <!-- Product List -->
    <div class="modal fade" id="PartNolistModel" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    @*<button type="button" class="close" data-dismiss="modal" onclick="SetFocusItemRevNo();">&times;</button>*@
                    <h4 class="modal-title">Select Product</h4>
                </div>
                <div class="modal-body">
                    <input type="text" onkeydown="PartNoListkeydown(event)" id="txtPartNoCode" autofocus width="100%" placeholder="Search By Part No." />
                    <div id="PartNoTable">
                        <table border='1' width="100%" class="dynamicPopupTbl">
                            <tbody>
                                <tr class="HeaderStyle">
                                    <th class="hide">id</th>
                                    <th>Product Code</th>
                                    <th>Product Name</th>
                                    <th>Inventory</th>
                                    <th>HSN/SAC</th>
                                    <th>Brand</th>
                                    <th>Class</th>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal" onclick="SetFocusItemRevNo();">Close</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Product List-->
    <!-- Multi Uom PopUp -->
    <div class="modal fade" id="Popup_MultiUOM" role="dialog">
        <div class="modal-dialog" style="width:80%">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" onclick="SetFocusItemRevNo();">&times;</button>
                    <h4 class="modal-title">Multi Uom</h4>
                </div>
                <div class="clearfix col-md-12" style="background: #f5f4f3; padding: 8px 0; margin-bottom: 15px; border-radius: 4px; border: 1px solid #ccc;">
                    <div class="col-sm-12">
                        <table class="eqTble">
                            <tr>
                                <td>
                                    <div>
                                        <div style="margin-bottom: 5px;">
                                            <div>
                                                <label>Base Quantity</label>
                                            </div>
                                            <div>


                                                <input type="text" id="UOMQuantity" style="text-align: right;" maxlength="18" class="allownumericwithdecimal" onchange="CalcBaseRate();setTwoNumberDecimal(this)" />

                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="Left_Content" style="">
                                        <div>
                                            <label style="text-align: right;">Base UOM</label>
                                        </div>
                                        <div>
                                            <select id="ddl_UOM" class="form-control">
                                                @*<option value="0">---Select---</option>*@
                                            </select>
                                        </div>
                                    </div>
                                </td>

                                <td>
                                    <div style="margin-bottom: 5px;">
                                        <div>
                                            <label>Base Rate </label>
                                        </div>
                                        <div>
                                            @*<dxe:ASPxTextBox ID="cmbBaseRate" runat="server" Width="80px" ClientInstanceName="ccmbBaseRate" DisplayFormatString="0.000" MaskSettings-Mask="&lt;0..99999999&gt;.&lt;00..999&gt;" FocusedStyle-HorizontalAlign="Right" HorizontalAlign="Right" ReadOnly="true"></dxe:ASPxTextBox>*@
                                            <input type="text" id="cmbBaseRate" style="text-align: right;" maxlength="18" class="allownumericwithdecimal" readonly="readonly" />
                                        </div>
                                    </div>
                                </td>

                                <td>
                                    <span style="font-size: 22px; padding-top: 15px; display: inline-block;">=</span>
                                </td>
                                <td>
                                    <div>
                                        <div>
                                            <label style="text-align: right;">Alt. UOM</label>
                                        </div>
                                        <div>
                                            <select id="ddl_ALTUOM" class="form-control" onchange="{ PopulateMultiUomAltQuantity(); setTwoNumberDecimal(this); }">
                                                @*<option value="0">---Select---</option>*@
                                            </select>
                                        </div>
                                        @*<div class="Left_Content" style="">
                                                <dxe:ASPxComboBox ID="cmbSecondUOM" ClientInstanceName="ccmbSecondUOM" runat="server" SelectedIndex="0" DataSourceID="AltUomSelect"
                                                                  ValueType="System.String" Width="100%" EnableSynchronization="True" EnableIncrementalFiltering="True" ValueField="UOM_ID" TextField="UOM_Name">
                                                    <clientsideevents textchanged="function(s,e) { PopulateMultiUomAltQuantity();setTwoNumberDecimal(this);}" />
                                                </dxe:ASPxComboBox>
                                            </div>*@
                                    </div>
                                </td>
                                <td>
                                    <div style="margin-bottom: 5px;">
                                        <div>
                                            <label>Alt. Quantity </label>
                                        </div>
                                        <div>
                                            <input type="text" id="AltUOMQuantity" style="text-align:right;" maxlength="18" class="allownumericwithdecimal" onchange="CalcBaseQty()" />
                                            @*<dxe:ASPxTextBox ID="AltUOMQuantity" runat="server" ClientInstanceName="cAltUOMQuantity" DisplayFormatString="0.0000" MaskSettings-Mask="&lt;0..999999999&gt;.&lt;00..9999&gt;" FocusedStyle-HorizontalAlign="Right" HorizontalAlign="Right">

                                                    <clientsideevents textchanged="function(s,e) { CalcBaseQty();}" />

                                                </dxe:ASPxTextBox>*@
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div style="margin-bottom: 5px;">
                                        <div>
                                            <label>Alt Rate </label>
                                        </div>
                                        <div>
                                            @*<dxe:ASPxTextBox ID="cmbAltRate" Width="80px" runat="server" ClientInstanceName="ccmbAltRate" DisplayFormatString="0.000" MaskSettings-Mask="&lt;0..99999999&gt;.&lt;00..999&gt;" FocusedStyle-HorizontalAlign="Right" HorizontalAlign="Right">
                                                    <clientsideevents textchanged="function(s,e) { CalcBaseRate();}" />
                                                </dxe:ASPxTextBox>*@
                                            <input type="text" id="cmbAltRate" style="text-align:right;" maxlength="18" class="allownumericwithdecimal" onchange="CalcBaseRate()" />
                                        </div>
                                    </div>
                                </td>
                                <td style="width: 115px; padding-top: 25px;">
                                    <div style="margin-bottom: 5px;">
                                        <div>
                                            <label class="checkbox-inline mlableWh">
                                                <input type="checkbox" id="chkUpdateRow" />
                                                <span style="margin: 0px 0; display: block">
                                                    @*<dxe:ASPxLabel ID="ASPxLabel18" runat="server" Text="Update Row">
                                                        </dxe:ASPxLabel>*@
                                                    <label>Update Row</label>
                                                </span>
                                            </label>

                                        </div>
                                    </div>


                                </td>

                                <td style="padding-top: 14px;">
                                    @*<dxe:ASPxButton ID="btnMUltiUOM" ClientInstanceName="cbtnMUltiUOM" Width="50px" runat="server" AutoPostBack="False" Text="Add" CssClass="btn btn-primary">
                                            <clientsideevents click="function(s, e) { if(!document.getElementById('myCheck').checked)  {SaveMultiUOM();}}" />
                                        </dxe:ASPxButton>*@
                                    <button type="button" id="btnMUltiUOM" class="btn btn-success" onclick="SaveMultiUOM()">Add</button>
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
                <div class="clearfix col-md-12" style="background: #f5f4f3; padding: 8px 0; margin-bottom: 15px; border-radius: 4px; border: 1px solid #ccc;">
                    @*@{

                            Html.RenderAction("MultiUomList", "BOMEntry");

                        }*@
                    <table id="datatableMultiUom" class="table table-striped table-bordered">
                        <thead>
                            <tr>

                                <th>Quantity</th>
                                <th>UOM</th>
                                <th>Rate</th>
                                <th>Alt. UOM</th>
                                <th>Alt. Quantity</th>
                                <th>Rate</th>
                                <th>Update Row</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="MultiUom_List"></tbody>
                        <tfoot>

                        </tfoot>
                    </table>
                </div>
                @*<div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal" onclick="SetFocusItemRevNo();">Close</button>
                    </div>*@
                <div class="modal-footer">
                    <button type="button" id="SaveMultiUom_btn" class="btn btn-primary" onclick="SaveMultiUomFn();" style="float:left">Save</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Multi Uom PopUp-->
